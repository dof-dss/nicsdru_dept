<?php

/**
 * @file
 * Book admendments for Departmental sites.
 */

use Drupal\flag\FlagInterface;
use Drupal\node\NodeInterface;

/**
 * Implements hook_entity_type_alter().
 */
function dept_book_entity_type_alter(array &$entity_types) {
  // Remove BookOutlineConstraint to permit outline changes to
  // nodes/books regardless of publish status.
  /* @var \Drupal\Core\Entity\ContentEntityTypeInterface $node_entity_type */
  $node_entity_type = &$entity_types['node'];
  $constraints = $node_entity_type->getConstraints();

  if (array_key_exists('BookOutline', $constraints)) {
    unset($constraints['BookOutline']);
    $node_entity_type->setConstraints($constraints);
  }
}

/**
 * Implements hook_ENTITY_TYPE_update().
 */
function dept_book_node_update(EntityInterface $entity) {
  if ($entity instanceof NodeInterface === FALSE) {
    return;
  }

  $book = $entity->book ?? NULL;

  if (empty($book)) {
    return;
  }

  if ($book['bid'] === $book['nid']) {
    /* @var \Drupal\flag\FlagServiceInterface $flag_service */
    $flag_service = \Drupal::service('flag');
    /* @var \Drupal\flag\FlagCountManagerInterface $flag_count_service */
    $flag_count_service = \Drupal::service('flag.count');

    // Has the node already had the ToC flag set? If so, nothing to do.
    $flags = $flag_count_service->getEntityFlagCounts($entity);
    if (array_key_exists('disable_toc', $flags) && $flags['disable_toc'] == 1) {
      return;
    }

    $toc_flag = $flag_service->getFlagById('disable_toc');

    // Flag the content to disable the toc.
    if ($toc_flag instanceof FlagInterface) {
      $flag_service->flag($toc_flag, $entity);
    }
  }
}


