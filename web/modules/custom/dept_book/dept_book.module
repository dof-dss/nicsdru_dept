<?php

/**
 * @file
 * Book admendments for Departmental sites.
 */

use Drupal\Component\Utility\NestedArray;
use Drupal\Core\Cache\Cache;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\flag\FlagInterface;
use Drupal\node\Entity\NodeType;
use Drupal\node\NodeInterface;

/**
 * Implements hook_entity_presave().
 */
function dept_book_entity_presave(EntityInterface $entity) {
  if ($entity instanceof NodeType) {
    $book = $entity->book ?? NULL;

    if (empty($book)) {
      return;
    }
    else {
      /* @var \Drupal\flag\FlagServiceInterface $flag_service */
      $flag_service = \Drupal::service('flag');
      /* @var \Drupal\flag\FlagCountManagerInterface $flag_count_service */
      $flag_count_service = \Drupal::service('flag.count');

      // Has the node already had the ToC flag set? If so, nothing to do.
      $flags = $flag_count_service->getEntityFlagCounts($entity);
      if (array_key_exists('disable_toc', $flags) && $flags['disable_toc'] == 1) {
        return;
      }

      $toc_flag = $flag_service->getFlagById('disable_toc');

      // Flag the content to disable the toc.
      if ($toc_flag instanceof FlagInterface) {
        $flag_service->flag($toc_flag, $entity);
      }
    }
  }
}

/**
 * Implements hook_entity_type_alter().
 */
function dept_book_entity_type_alter(array &$entity_types) {
  // Remove BookOutlineConstraint to permit outline changes to
  // nodes/books regardless of publish status.
  /* @var \Drupal\Core\Entity\ContentEntityTypeInterface $node_entity_type */
  $node_entity_type = &$entity_types['node'];
  $constraints = $node_entity_type->getConstraints();

  if (array_key_exists('BookOutline', $constraints)) {
    unset($constraints['BookOutline']);
    $node_entity_type->setConstraints($constraints);
  }
}

/**
 * Implements hook_ENTITY_TYPE_update().
 */
function dept_book_node_update(EntityInterface $entity) {
  if ($entity instanceof NodeInterface === FALSE) {
    return;
  }

  $book = $entity->book ?? NULL;

  if (empty($book)) {
    return;
  }

  if ($book['bid'] === $book['nid']) {
    /* @var \Drupal\flag\FlagServiceInterface $flag_service */
    $flag_service = \Drupal::service('flag');
    /* @var \Drupal\flag\FlagCountManagerInterface $flag_count_service */
    $flag_count_service = \Drupal::service('flag.count');

    // Has the node already had the ToC flag set? If so, nothing to do.
    $flags = $flag_count_service->getEntityFlagCounts($entity);
    if (array_key_exists('disable_toc', $flags) && $flags['disable_toc'] == 1) {
      return;
    }

    $toc_flag = $flag_service->getFlagById('disable_toc');

    // Flag the content to disable the toc.
    if ($toc_flag instanceof FlagInterface) {
      $flag_service->flag($toc_flag, $entity);
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function dept_book_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Interject in the book outline form. Purge cache items
  // from affected book ids and associated node id cache entries.
  if (preg_match('/book_(outline|remove)/', $form_id)) {

    if (NestedArray::keyExists($form, ['actions', 'submit', '#submit'])) {
      array_unshift($form['actions']['submit']['#submit'], 'dept_book_process_topics');
    }

    $form['#submit'][] = 'dept_book_process_topics';

    if (!str_contains($form_id, 'ajax')) {
      $form['#submit'][] = 'dept_book_structure_change_cache_clear';
    }
  }
}

/**
 * Callback to process topics for book content.
 *
 * Entities will also be processed from the dept_topics module.
 *
 * @see \Drupal\dept_topics\TopicManager.php
 * @see \Drupal\dept_topics\dept_topics.module
 */
function dept_book_process_topics(array $form, FormStateInterface $form_state) {
  $values = $form_state->getValues();

  // Add the entity back into the child content field for each topic for
  // that entity's site topics values.
  if ($form['#form_id'] === 'book_remove_form') {
    $entity = \Drupal::routeMatch()->getParameter('node');
    if ($entity->hasField('field_site_topics')) {
      $topic_manager = \Drupal::service('topic.manager');
      $topic_manager->updateChildDisplayOnTopics($entity);
    }
  }

  // If the entity is not the parent item of the book, remove it from the child
  // content field for each topic in the entity's site topics values.
  // TL:DR; Hide child pages from topic/subtopic pages.
  if ($values['book']['nid'] !== $values['book']['bid']) {
    // @phpstan-ignore-next-line
    $entity = $form_state->getFormObject()->getEntity();
    if ($entity->hasField('field_site_topics')) {
      $topic_manager = \Drupal::service('topic.manager');
      $topic_manager->removeChildDisplayFromTopics($entity);
    }
  }
}

/**
 * Form submit callback used to purge cache items
 * for books and the node being affected.
 */
function dept_book_structure_change_cache_clear(&$form, FormStateInterface $form_state) {
  $book = $form_state->get('book') ?? [];
  $cache_tags = [];

  if (!empty($book['book'])) {
    $cache_tags[] = 'bid:' . $book['book']['bid'];
    $cache_tags[] = 'node:' . $book['book']['nid'];
  }

  Cache::invalidateTags($cache_tags);
}

/**
 * Implements hook_preprocess_book_navigation().
 */
function dept_book_preprocess_book_navigation(&$variables) {
  // Set some top level tags we can use to expire whenever
  // a book outline is changed or a node removed from a book.
  $variables['#cache']['tags'] = [
    'bid:' . $variables['book_link']['bid'],
    'node:' . $variables['book_link']['nid'],
  ];
}
