<?php

/**
 * @file
 * Primary module hooks for Departmental sites: Sitemaps module.
 */

use Drupal\dept_core\Entity\Department;
use Drupal\simple_sitemap\Entity\SimpleSitemapInterface;

/**
 * Implements hook_cron().
 */
function dept_sitemap_cron() {
  // Update sitemap index urls to remove wildcard hostname patterns.
  // NB: workaround for lack of a hook or event to use when a sitemap
  // index is published or saved.
  // ANOTHER NB: Not possible ask for the site's full hostname
  // with drush as the active URL is not passed, so you end up with
  // http://default. In that case, we'll get the context of each dept
  // by loading the object using the sitemap id and asking it for its
  // URL for the current environment. From there we can use it to update
  // the XML string using a MySQL regex function where we know there might
  // be a need... eg: where the hostname is the wildcard pattern, spotted by
  // a '*' in the URL hostname.
  // TLDR: from this
  // https://finance-ni.*.uk-1.platformsh.site
  // to this
  // https://finance-ni.main-bvxea6i-dnvkwx4xjhiza.uk-1.platformsh.site
  // We need to load the dept from the simple_sitemap column value,
  // otherwise we have no context of the dept from running via drush
  // or relying on existing URL strings in the XML which is a bit flaky.
  $depts = \Drupal::database()->query("SELECT DISTINCT `type` FROM {simple_sitemap} WHERE delta=0")->fetchCol(0);

  foreach ($depts as $dept_id) {
    $dept = \Drupal::service('department.manager')->getDepartment($dept_id);

    if ($dept instanceof Department === FALSE) {
      continue;
    }

    $dept_url_bits = parse_url($dept->url());
    $dept_prefix = explode('.', $dept_url_bits['host'])[0];

    if (empty($dept_prefix)) {
      continue;
    }

    if (!empty(getenv('PLATFORM_ENVIRONMENT'))) {
      $replace = sprintf("https://%s.%s-%s.uk-1.platformsh.site",
        $dept_prefix,
        getenv('PLATFORM_ENVIRONMENT') ?? '',
        getenv('PLATFORM_PROJECT') ?? '');
    }

    // Local dev override.
    if (!empty(getenv('LANDO'))) {
      $replace = "https://{$dept_prefix}.lndo.site";
    }

    if (empty($replace)) {
      continue;
    }

    // Use dynamic query for update - see advice on d.o for complex expression queries.
    // https://www.drupal.org/docs/8/api/database-api/dynamic-queries/introduction-to-dynamic-queries.
    $query = \Drupal::database()->update('simple_sitemap')
      ->expression('sitemap_string', "REGEXP_REPLACE(sitemap_string, :find_expression, :replace)", [
        ':find_expression' => 'http(?:s?):\/\/.*?([^\.\/]+?\.[^\.]+?)(?:\/|$)',
        ':replace' => $replace . '/',
      ])
      ->condition('type', $dept_id)
      ->condition('sitemap_string', "%{$replace}%", 'NOT LIKE')
      ->execute();

    // REGEX_REPLACE will break the <sitemapindex namespace URL, so patch it up here.
    $query = \Drupal::database()->update('simple_sitemap')
      ->expression('sitemap_string', "REPLACE(sitemap_string, :incorrect_xmlns, :correct_xmlns)", [
        ':incorrect_xmlns' => "<sitemapindex xmlns=\"{$replace}/schemas/sitemap/0.9\">",
        ':correct_xmlns' => '<sitemapindex xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">',
      ])->execute();

    // Ditto for the <urlset namespace links.
    $query = \Drupal::database()->update('simple_sitemap')
      ->expression('sitemap_string', "REPLACE(sitemap_string, :incorrect_urlset, :correct_urlset)", [
        ':incorrect_urlset' => "<urlset xmlns=\"{$replace}/schemas/sitemap/0.9\" xmlns:xhtml=\"$replace/1999/xhtml\" xmlns:image=\"{$replace}/schemas/sitemap-image/1.1\">",
        ':correct_urlset' => '<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9" xmlns:image="http://www.google.com/schemas/sitemap-image/1.1">',
      ])->execute();
  }
}
