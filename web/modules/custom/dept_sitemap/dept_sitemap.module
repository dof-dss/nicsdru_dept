<?php

/**
 * @file
 * Primary module hooks for Departmental sites: Sitemaps module.
 */

use Drupal\dept_core\Entity\Department;
use Drupal\simple_sitemap\Entity\SimpleSitemapInterface;

/**
 * Implements hook_cron().
 */
function dept_sitemap_cron() {
  // Update sitemap index urls to remove wildcard hostname patterns.
  // NB: workaround for lack of a hook or event to use when a sitemap
  // index is published or saved.
  // ANOTHER NB: Not possible ask for the site's full hostname
  // with drush as the active URL is not passed, so you end up with
  // http://default. In that case, we'll get the context of each dept
  // by loading the object using the sitemap id and asking it for its
  // URL for the current environment. From there we can use it to update
  // the XML string using a MySQL regex function where we know there might
  // be a need... eg: where the hostname is the wildcard pattern, spotted by
  // a '*' in the URL hostname.
  // TLDR: from this
  // https://finance-ni.*.uk-1.platformsh.site
  // to this
  // https://finance-ni.main-bvxea6i-dnvkwx4xjhiza.uk-1.platformsh.site

  if (empty(getenv('PLATFORM_ENVIRONMENT'))) {
    // Don't update if not on PSH cluster.
    return;
  }

  $replace = sprintf("https://.%s-%s.uk-1.platformsh.site",
    getenv('PLATFORM_ENVIRONMENT') ?? '',
    getenv('PLATFORM_PROJECT') ?? '');

  // Use dynamic query for update - see advice on d.o for complex expression queries.
  // https://www.drupal.org/docs/8/api/database-api/dynamic-queries/introduction-to-dynamic-queries.
  $query = \Drupal::database()->update('simple_sitemap')
    ->expression('sitemap_string', "REGEXP_REPLACE(sitemap_string, :find_expression, :replace)", [
      ':find_expression' => 'http(?:s?):\/\/.*?([^\.\/]+?\.[^\.]+?)(?:\/|$)',
      ':replace' => $replace . '/',
    ])
    ->execute();
}
