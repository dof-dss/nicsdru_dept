<?php

/**
 * @file
 * Core functionality for Departmental sites.
 */

use Drupal\Core\Cache\Cache;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Menu\MenuTreeParameters;
use Drupal\Core\Template\Attribute;
use Drupal\Core\Url;
use Drupal\Core\Link;
use Drupal\node\NodeInterface;


function subtopic_content($nid) {

  $d7conn = \Drupal\Core\Database\Database::getConnection('default', 'drupal7db');

  $subcontent_sql = "WITH content_stack_cte (nid, type, title, weight) AS (
    SELECT
        n.nid,
        n.type,
        n.title,
        ds.weight
    FROM draggableviews_structure ds
    JOIN node n ON n.nid = ds.entity_id
    WHERE ds.view_name = 'draggable_subtopics'
      AND ds.view_display = 'panel_pane_2'
      AND ds.args = :nidargs
      AND n.status = 1
     UNION
         SELECT
        st_n.nid,
        st_n.type,
        st_n.title,
        99 as weight
    FROM node st_n
    JOIN field_data_field_parent_topic nfps ON st_n.nid = nfps.entity_id
    LEFT OUTER JOIN field_data_field_parent_subtopic nfpst ON st_n.nid = nfpst.entity_id
    WHERE st_n.type = 'subtopic'
    AND nfps.field_parent_topic_target_id = :nid
    AND st_n.status = 1
    AND nfpst.entity_id IS NULL
    UNION
    SELECT
        ar_n.nid,
        ar_n.type,
        ar_n.title,
        99 as weight
    FROM node ar_n
    JOIN field_data_field_site_subtopics nfss ON ar_n.nid = nfss.entity_id
    WHERE ar_n.type = 'article' AND nfss.field_site_subtopics_target_id = :nid
      AND ar_n.status = 1

)
SELECT DISTINCT nid, type, title FROM content_stack_cte
ORDER BY weight, title";

  $topic_ref_nodes_d7 = $d7conn->query($subcontent_sql, [
    ':nidargs' => '["' . $nid . '","' . $nid . '"]',
    ':nid' => $nid
  ])->fetchAll();

  return $topic_ref_nodes_d7;
}



/**
 * Implements hook_preprocess_page().
 */
function dept_core_preprocess_page(&$variables) {
  dept_core_append_dept_info_for_templates($variables);

  $d9dbConn = \Drupal::database();
  $lookupManager = \Drupal::service('dept_migrate.migrate_uuid_lookup_manager');

    $domain_topics_d9 = $d9dbConn->query("
    SELECT ds.entity_id FROM node__field_domain_source ds
    INNER JOIN node_field_data nfd
    ON ds.entity_id = nfd.nid
    WHERE ds.bundle = 'topic'
    AND ds.field_domain_source_target_id = 'finance'"
  )->fetchCol();

   $topic_nodes = \Drupal::entityTypeManager()->getStorage('node')->loadMultiple($domain_topics_d9);

   foreach ($topic_nodes as $topic_node) {
     $topic_content_references = $topic_node->get('field_topic_content');
     $target_ids = [];

//     ksm("####### " . $topic_node->label() . " ########");

     // Fetch content reference target ids.
     foreach ($topic_content_references as $reference) {
       $target_ids[] = $reference->get('entity')->getTargetIdentifier();
     }

     $source_ids = $lookupManager->lookupByDestinationNodeIds($target_ids);

     foreach ($source_ids as $source_id) {
        if ($source_id['type'] === 'subtopic') {
          $subtopic_contents = subtopic_content($source_id['d7nid']);
        }
//       ksm($source_id['title'] . " (" . $source_id['d7nid'] . ")", $subtopic_contents);
     }
   }
}

/**
 * Implements hook_preprocess_node().
 */
function dept_core_preprocess_node(&$variables) {
  dept_core_append_dept_info_for_templates($variables);
}

/**
 * Implements hook_preprocess_field().
 */
function dept_core_preprocess_field(&$variables) {
  dept_core_append_dept_info_for_templates($variables);
}

/**
 * Implements hook_preprocess_menu().
 */
function dept_core_preprocess_menu(&$variables) {
  if ($variables['menu_name'] === 'footer' && !empty($variables['items'])) {
    // Add a menu link to the end of the menu with a link to the
    // accessibility statement defined in the group field value.
    $dept = \Drupal::service('department.manager')->getCurrentDepartment();

    // @phpstan-ignore-next-line
    if (empty($dept)) {
      return;
    }

    // Footer menu doesn't vary much at all so use a very broad context.
    // See https://www.drupal.org/docs/drupal-apis/cache-api/cache-contexts#core-contexts

    if (($accessibility_statement = $dept->accessibilityStatement()) !== NULL && $accessibility_statement instanceof NodeInterface) {
      // See MenuLinkTree->buildItems() which this imitates.
      $menu_link = [
        'title' => 'Accessibility statement',
        'url' => Url::fromRoute('entity.node.canonical', ['node' => $accessibility_statement->id()]),
        'is_collapsed' => FALSE,
        'is_expanded' => FALSE,
        'in_active_trail' => FALSE,
        'attributes' => new Attribute(),
      ];

      $cache_tags[] = 'node:' . $accessibility_statement->id();

      if (!empty($variables['#cache']['tags'])) {
        $variables['#cache']['tags'] = Cache::mergeTags($cache_tags, $variables['#cache']['keys']);
      }

      $variables['items'][] = $menu_link;
      $variables['#cache']['tags'] = $cache_tags;
    }

  }
}

/**
 * Function that adds department object metadata to
 * preprocess variables for use in templates.
 */
function dept_core_append_dept_info_for_templates(array &$variables) {
  $dept_manager = \Drupal::service('department.manager');
  /** @var \Drupal\dept_core\Entity\Department $dept */
  $dept = $dept_manager->getCurrentDepartment();

  if (is_null($dept)) {
    return;
  }
  // Object properties/method values set as preprocess variables
  // to remain compliant with Twig sandbox configuration which
  // prohibits direct access to many object properties (security reasons)
  // except for those on a pre-defined method allow-list.
  // See https://chromatichq.com/insights/custom-entity-methods-twig-templates/
  // and https://www.drupal.org/forum/support/theme-development/2018-09-05/twig-sandbox-security-error-when-calling-object-method
  $variables['department']['id'] = $dept->id();
  $variables['department']['name'] = $dept->name();
}

/**
 * Implements hook_entity_update().
 */
function dept_core_entity_update(EntityInterface $entity) {

  // Update the corresponding Department label when a Domain label is updated.
  if ($entity->getEntityType()->id() == 'domain' && !$entity->isNew()) {
    $department = \Drupal::entityTypeManager()->getStorage('department')->load($entity->id());

    if (!empty($department) && $department->label() !== $entity->label()) {
      // @phpstan-ignore-next-line
      $department->set('label', $entity->label());
      $department->save();
    }
  }
}

/**
 * Implements hook_token_info().
 */
function dept_core_token_info() {

  $types['departmental'] = [
    'name' => t("Departmental"),
    'description' => t("Departmental site tokens"),
  ];

  $tokens['all-departments-links'] = [
    'name' => t("Departments links"),
    'description' => t("Displays a list of links to each department site"),
  ];

  $tokens['related-sites'] = [
    'name' => t("Related sites"),
    'description' => t("Displays a list of related and departmental sites"),
  ];

  return [
    'types' => $types,
    'tokens' => [
      'departmental' => $tokens,
    ],
  ];
}

/**
 * Implements hook_tokens().
 */
function dept_core_tokens($type, $tokens, array $data, array $options, $bubbleable_metadata) {

  $replacements = [];

  if ($type === 'departmental') {
    foreach ($tokens as $name => $original) {
      switch ($name) {
        // Display a list of links to each Department.
        case 'all-departments-links':
          $links = dept_core_department_links();

          $link_list = [
            '#theme' => 'item_list',
            '#list_type' => 'ul',
            '#items' => $links,
            '#cache' => [
              'tags' => [
                'department_list',
              ],
            ],
          ];

          $replacements[$original] = \Drupal::service('renderer')->render($link_list);

          break;

        case 'related-sites':
          $links = dept_core_department_links();
          $menu = \Drupal::menuTree()->load('footer-related-sites', new MenuTreeParameters());
          $classes = [];
          $index = 0;

          foreach ($menu as $item) {
            if ($item->link->isEnabled()) {
              $index++;
              if ($index == 1) {
                $classes[] = 'related-sites-first';
              }

              if ($index == count($menu)) {
                $classes[] = 'related-sites-last';
              }
              $links[] = [
                '#wrapper_attributes' => ['class' => implode(' ', $classes)],
                Link::fromTextAndUrl($item->link->getTitle(), $item->link->getUrlObject())->toRenderable()
              ];
              $classes = [];
            }
          }

          $link_list = [
            '#theme' => 'item_list',
            '#list_type' => 'ul',
            '#attributes' => ['class' => 'related-websites-list'],
            '#items' => $links,
            '#cache' => [
              'tags' => [
                'config:system.menu.footer-related-sites',
                'department_list',
              ],
            ],
          ];

          $replacements[$original] = \Drupal::service('renderer')->render($link_list);

          break;
      }
    }
  }

  return $replacements;
}

/**
 * Return a list of Department links.
 *
 * @return array
 *   List of active department links, sorted by weight.
 */
function dept_core_department_links(): array {
  $dept_storage = \Drupal::entityTypeManager()->getStorage('department');

  $department_ids = $dept_storage->getQuery()
    ->condition('status', TRUE)
    ->sort('weight')
    ->execute();

  $departments = $dept_storage->loadMultiple($department_ids);
  $links = [];
  $classes = [];
  $index = 0;

  foreach ($departments as $department) {
    $index++;
    if ($index == 1) {
      $classes[] = 'department-sites-first';
    }

    if ($index == count($departments)) {
      $classes[] = 'department-sites-last';
    }

    $links[] = [
      '#wrapper_attributes' => ['class' => implode(' ', $classes)],
      // @phpstan-ignore-next-line
      Link::fromTextAndUrl($department->label(), Url::fromUri($department->url()))->toRenderable()
    ];
    $classes = [];
  }
  return $links;
}
