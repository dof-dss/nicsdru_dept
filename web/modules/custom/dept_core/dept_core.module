<?php

/**
 * @file
 * Core functionality for Departmental sites.
 */

use Drupal\Core\Cache\Cache;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Link;
use Drupal\Core\Menu\MenuTreeParameters;
use Drupal\Core\Template\Attribute;
use Drupal\Core\Url;
use Drupal\dept_core\Entity\Department;
use Drupal\media\MediaInterface;
use Drupal\node\NodeInterface;
use Drupal\views\ViewExecutable;

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function dept_core_media_presave(EntityInterface $entity) {
  if ($entity instanceof MediaInterface) {
    $domain_access = $entity->get('field_domain_access')->getValue();
    $domain_source = $entity->get('field_domain_source')->getValue();
    $current_domain = \Drupal::service('department.manager')->getCurrentDepartment();

    if ($current_domain instanceof Department
      && (empty($domain_access) && empty($domain_source))) {

      $entity->set('field_domain_source', ['target_id' => $current_domain->id()]);
      $entity->set('field_domain_access', ['target_id' => $current_domain->id()]);
    }
  }
}

/**
 * Implements hook_preprocess_page().
 */
function dept_core_preprocess_page(&$variables) {
  dept_core_append_dept_info_for_templates($variables);
}

/**
 * Implements hook_preprocess_node().
 */
function dept_core_preprocess_node(&$variables) {
  dept_core_append_dept_info_for_templates($variables);
}

/**
 * Implements hook_preprocess_field().
 */
function dept_core_preprocess_field(&$variables) {
  dept_core_append_dept_info_for_templates($variables);
}

/**
 * Implements hook_preprocess_menu().
 */
function dept_core_preprocess_menu(&$variables) {
  // domain_source module does a variety of conversions for routed paths
  // changing, for example, <front> from a relative path to the source/canonical
  // domain's absolute URI. This causes some interesting disruption around what link
  // is rendered for some things. It's extremely opaque as to precisely what
  // causes this and how best to intercept/adjust, but nothing in domain_source.api.php
  // triggers. DomainRouteProvider.php and DomainSourcePathProcess.php also don't seem
  // to have a visible role in the rewriting of the route path.
  if ($variables['menu_name'] === 'main' && !empty($variables['items'])) {
    foreach ($variables['items'] as $id => &$item) {
      $url = $item['url'];
      /* @var \Drupal\Core\Url $item */
      if ($url->getRouteName() === '<front>') {
        /* @var \Drupal\dept_core\DepartmentManager $dept_manager */
        $dept_manager = \Drupal::service('department.manager');
        $current_dept = $dept_manager->getCurrentDepartment();
        $item['url'] = Url::fromUri($current_dept->url());
      }
    }
  }

  if ($variables['menu_name'] === 'footer' && !empty($variables['items'])) {
    // Add a menu link to the end of the menu with a link to the
    // accessibility statement defined in the group field value.
    $dept = \Drupal::service('department.manager')->getCurrentDepartment();

    // @phpstan-ignore-next-line
    if (empty($dept)) {
      return;
    }

    // Footer menu doesn't vary much at all so use a very broad context.
    // See https://www.drupal.org/docs/drupal-apis/cache-api/cache-contexts#core-contexts

    if (($accessibility_statement = $dept->accessibilityStatement()) !== NULL && $accessibility_statement instanceof NodeInterface) {
      // See MenuLinkTree->buildItems() which this imitates.
      $menu_link = [
        'title' => 'Accessibility statement',
        'url' => Url::fromRoute('entity.node.canonical', ['node' => $accessibility_statement->id()]),
        'is_collapsed' => FALSE,
        'is_expanded' => FALSE,
        'in_active_trail' => FALSE,
        'attributes' => new Attribute(),
      ];

      $cache_tags[] = 'node:' . $accessibility_statement->id();

      if (!empty($variables['#cache']['tags'])) {
        $variables['#cache']['tags'] = Cache::mergeTags($cache_tags, $variables['#cache']['keys']);
      }

      $variables['items'][] = $menu_link;
      $variables['#cache']['tags'] = $cache_tags;
    }

  }
}

/**
 * Function that adds department object metadata to
 * preprocess variables for use in templates.
 */
function dept_core_append_dept_info_for_templates(array &$variables) {
  $dept_manager = \Drupal::service('department.manager');
  /** @var \Drupal\dept_core\Entity\Department $dept */
  $dept = $dept_manager->getCurrentDepartment();

  if (is_null($dept)) {
    return;
  }
  // Object properties/method values set as preprocess variables
  // to remain compliant with Twig sandbox configuration which
  // prohibits direct access to many object properties (security reasons)
  // except for those on a pre-defined method allow-list.
  // See https://chromatichq.com/insights/custom-entity-methods-twig-templates/
  // and https://www.drupal.org/forum/support/theme-development/2018-09-05/twig-sandbox-security-error-when-calling-object-method
  $variables['department']['id'] = $dept->id();
  $variables['department']['name'] = $dept->name();
}

/**
 * Implements hook_entity_update().
 */
function dept_core_entity_update(EntityInterface $entity) {

  // Update the corresponding Department label when a Domain label is updated.
  if ($entity->getEntityType()->id() == 'domain' && !$entity->isNew()) {
    $department = \Drupal::entityTypeManager()->getStorage('department')->load($entity->id());

    if (!empty($department) && $department->label() !== $entity->label()) {
      // @phpstan-ignore-next-line
      $department->set('label', $entity->label());
      $department->save();
    }
  }
}

/**
 * Implements hook_token_info().
 */
function dept_core_token_info() {

  $types['departmental'] = [
    'name' => t("Departmental"),
    'description' => t("Departmental site tokens"),
  ];

  $tokens['all-departments-links'] = [
    'name' => t("Departments links"),
    'description' => t("Displays a list of links to each department site"),
  ];

  $tokens['related-sites'] = [
    'name' => t("Related sites"),
    'description' => t("Displays a list of related and departmental sites"),
  ];

  return [
    'types' => $types,
    'tokens' => [
      'departmental' => $tokens,
    ],
  ];
}

/**
 * Implements hook_tokens().
 */
function dept_core_tokens($type, $tokens, array $data, array $options, $bubbleable_metadata) {

  $replacements = [];

  if ($type === 'departmental') {
    foreach ($tokens as $name => $original) {
      switch ($name) {
        // Display a list of links to each Department.
        case 'all-departments-links':
          $links = dept_core_department_links();

          $link_list = [
            '#theme' => 'item_list',
            '#list_type' => 'ul',
            '#items' => $links,
            '#cache' => [
              'tags' => [
                'department_list',
              ],
            ],
          ];

          $replacements[$original] = \Drupal::service('renderer')->render($link_list);

          break;

        case 'related-sites':
          $links = dept_core_department_links();
          $menu = \Drupal::menuTree()->load('footer-related-sites', new MenuTreeParameters());
          $classes = [];
          $index = 0;

          foreach ($menu as $item) {
            if ($item->link->isEnabled()) {
              $index++;
              if ($index == 1) {
                $classes[] = 'related-sites-first';
              }

              if ($index == count($menu)) {
                $classes[] = 'related-sites-last';
              }
              $links[] = [
                '#wrapper_attributes' => ['class' => implode(' ', $classes)],
                Link::fromTextAndUrl($item->link->getTitle(), $item->link->getUrlObject())->toRenderable()
              ];
              $classes = [];
            }
          }

          $link_list = [
            '#theme' => 'item_list',
            '#list_type' => 'ul',
            '#attributes' => ['class' => 'related-websites-list'],
            '#items' => $links,
            '#cache' => [
              'tags' => [
                'config:system.menu.footer-related-sites',
                'department_list',
              ],
            ],
          ];

          $replacements[$original] = \Drupal::service('renderer')->render($link_list);

          break;
      }
    }
  }

  return $replacements;
}

/**
 * Return a list of Department links.
 *
 * @return array
 *   List of active department links, sorted by weight.
 */
function dept_core_department_links(): array {
  $dept_storage = \Drupal::entityTypeManager()->getStorage('department');

  $department_ids = $dept_storage->getQuery()
    ->condition('status', TRUE)
    ->sort('weight')
    ->accessCheck(FALSE)
    ->execute();

  $departments = $dept_storage->loadMultiple($department_ids);
  $links = [];
  $classes = [];
  $index = 0;

  foreach ($departments as $department) {
    $index++;
    if ($index == 1) {
      $classes[] = 'department-sites-first';
    }

    if ($index == count($departments)) {
      $classes[] = 'department-sites-last';
    }

    $links[] = [
      '#wrapper_attributes' => ['class' => implode(' ', $classes)],
      // @phpstan-ignore-next-line
      Link::fromTextAndUrl($department->label(), Url::fromUri($department->url()))->toRenderable()
    ];
    $classes = [];
  }
  return $links;
}

/**
 * Form submit callback used to purge cache items
 * for books and the node being affected.
 */
function dept_core_book_structure_cache_clear(&$form, FormStateInterface $form_state) {
  $book = $form_state->get('book') ?? [];
  $cache_tags = [];

  if (!empty($book['book'])) {
    $cache_tags[] = 'bid:' . $book['book']['bid'];
    $cache_tags[] = 'node:' . $book['book']['nid'];
  }

  Cache::invalidateTags($cache_tags);
}

/**
 * Implements hook_form_alter().
 */
function dept_core_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Interject in the book outline form. Purge cache items
  // from affected book ids and associated node id cache entries.
  if (preg_match('/book_(outline|remove)/', $form_id) && !str_contains($form_id, 'ajax')) {
    // Unusual to apply to pre and post-submit but seems to require both
    // See BookOutlineForm.php and BookRemoveForm.php.
    $form['#submit'] = array_merge(['dept_core_book_structure_cache_clear'], $form['#submit']);
    $form['#submit'][] = 'dept_core_book_structure_cache_clear';
  }

  if ($form_id === 'views_exposed_form') {
    if (!empty($form['dept'])) {
      /** @var \Drupal\dept_core\DepartmentManager $dept_manager */
      $dept_manager = \Drupal::service('department.manager');
      /** @var \Drupal\dept_core\Entity\Department $current_dept */
      $current_dept = $dept_manager->getCurrentDepartment();

      // Fetch current user's assigned domains.
      $current_user = \Drupal::entityTypeManager()->getStorage('user')->load(\Drupal::currentUser()->id());
      $user_domains = $current_user->get('field_domain_access')->referencedEntities();

      // If the user doesn't have top level domain permissions or no assigned domains, hide this filter option.
      if (!\Drupal::currentUser()->hasPermission('administer domains') || empty($user_domains)) {
        $form['dept']['#value'] = $current_dept->id();
        hide($form['dept']);
        return;
      }

      // Change to select list of known depts.
      $depts = $dept_manager->getAllDepartments();

      $form['dept'] = [
        '#type' => 'select',
        '#sort_options' => TRUE,
        '#required' => FALSE,
        '#empty_value' => FALSE,
      ];

      foreach ($user_domains as $domain) {
        $dept = $depts[$domain->id()];
        $form['dept']['#options'][$dept->id()] = $dept->label();
      }

      // #default_value doesn't work for select elements
      // see web/core/lib/Drupal/Core/Render/Element/Select.php
      // So instead, here we bodge the pre-selected value with either
      // the current dept id (if no selection) or let the user
      // pick their own which then takes precedent.
      $dept_selection = \Drupal::request()->query->get('dept');
      if (empty($dept_selection)) {
        $form['dept']['#value'] = $current_dept->id();
      }
    }
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function dept_core_form_node_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Attach admin theme fixes.
  $form['#attached']['library'][] = 'nicsdru_dept_theme/admin-forms';

  if (\Drupal::currentUser()->hasPermission('view departments on entity forms') === FALSE) {
    dept_core_set_entity_domain_defaults($form);
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function dept_core_form_media_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if (\Drupal::currentUser()->hasPermission('view departments on entity forms') === FALSE) {
    dept_core_set_entity_domain_defaults($form);
  }
}

/**
 * Function to hide domain access/source form elements
 * and set a default value for both of the current department.
 */
function dept_core_set_entity_domain_defaults(&$form) {
  $dept = \Drupal::service('department.manager')->getCurrentDepartment();

  foreach (['field_domain_access', 'field_domain_source'] as $element_id) {
    if (!empty($form[$element_id])) {
      // #default_value does not pass later validation. Odd but
      // shouldn't matter as the user won't be able to see the form options.
      $form[$element_id]['widget']['#value'] = $dept->id();
      // hide() doesn't hide the wrapping container element.
      // Changing the element type does.
      $form[$element_id]['#type'] = 'hidden';
    }
  }
}

/**
 * Implements hook_clientside_validation_should_validate().
 */
function dept_core_clientside_validation_should_validate($element, FormStateInterface &$form_state, $form_id) {
  // If node or media form, clientside validation won't validate.
  if (str_starts_with($form_id, 'node_')
    || str_starts_with($form_id, 'media_')) {
    return TRUE;
  }
}

/**
 * Implements hook_preprocess_book_navigation().
 */
function dept_core_preprocess_book_navigation(&$variables) {
  $variables['#cache']['max-age'] = 0;
}
