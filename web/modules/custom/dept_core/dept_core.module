<?php

/**
 * @file
 * Core functionality for Departmental sites.
 */

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Cache\Cache;
use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\Entity\EntityFormDisplay;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Link;
use Drupal\Core\Menu\MenuTreeParameters;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Template\Attribute;
use Drupal\Core\Url;
use Drupal\dept_core\Entity\Department;
use Drupal\field\Entity\FieldConfig;
use Drupal\media\MediaInterface;
use Drupal\node\NodeInterface;
use Drupal\simple_sitemap\Entity\SimpleSitemapInterface;
use Drupal\views\ViewExecutable;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;

/**
 * Implements hook_entity_access().
 */
function dept_core_entity_access(EntityInterface $entity, $operation, AccountInterface $account) {
  // Return a neutral result if hook is accessed through cli.
  if (php_sapi_name() === 'cli' || $entity->getEntityTypeId() != 'media') {
    return AccessResult::neutral();
  }

  // Workaround for bug in domain_entity module's access check. Compare user's
  // domain access values to the media entity's and if they match the underlying
  // permission then allow it rather than return a neutral response.
  if ($operation === 'delete') {
    $type = $entity->bundle();
    $typeEntity = $entity->getEntityTypeId();
    $manager = \Drupal::service('domain_access.manager');

    if ($account->hasPermission('delete ' . $type . ' ' . $typeEntity . ' content on assigned domains')
      && $manager->checkEntityAccess($entity, $account)) {

      return AccessResult::allowed();
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function dept_core_media_presave(EntityInterface $entity) {
  if ($entity instanceof MediaInterface) {
    dept_core_set_domain_defaults($entity);
  }
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function dept_core_user_presave(EntityInterface $entity) {
  if ($entity instanceof AccountInterface) {
    dept_core_set_domain_defaults($entity);
  }
}

/**
 * Function to set default values based on the current department
 * if the entity does not already have values selected for this.
 */
function dept_core_set_domain_defaults(EntityInterface &$entity) {
  // ContentEntityInterface checked here as get/set calls otherwise
  // potentially polymorphic and undependable as EntityInterface itself
  // doesn't provide those specific methods.
  if ($entity instanceof ContentEntityInterface === FALSE) {
    return;
  }

  $domain_access = $entity->get('field_domain_access')->getValue();
  $domain_source = $entity->get('field_domain_source')->getValue();
  $current_domain = \Drupal::service('department.manager')->getCurrentDepartment();

  if ($current_domain instanceof Department
    && (empty($domain_access) && empty($domain_source))) {

    $entity->set('field_domain_source', ['target_id' => $current_domain->id()]);
    $entity->set('field_domain_access', ['target_id' => $current_domain->id()]);
  }
}

/**
 * Implements hook_preprocess_page().
 */
function dept_core_preprocess_page(&$variables) {
  dept_core_append_dept_info_for_templates($variables);
}

/**
 * Implements hook_preprocess_node().
 */
function dept_core_preprocess_node(&$variables) {
  dept_core_append_dept_info_for_templates($variables);
}

/**
 * Implements hook_preprocess_field().
 */
function dept_core_preprocess_field(&$variables) {
  dept_core_append_dept_info_for_templates($variables);
}

/**
 * Implements hook_preprocess_menu().
 */
function dept_core_preprocess_menu(&$variables) {

  // domain_source module does a variety of conversions for routed paths
  // changing, for example, <front> from a relative path to the source/canonical
  // domain's absolute URI. This causes some interesting disruption around what link
  // is rendered for some things. It's extremely opaque as to precisely what
  // causes this and how best to intercept/adjust, but nothing in domain_source.api.php
  // triggers. DomainRouteProvider.php and DomainSourcePathProcess.php also don't seem
  // to have a visible role in the rewriting of the route path.
  if ($variables['menu_name'] === 'main' && !empty($variables['items'])) {
    foreach ($variables['items'] as $id => &$item) {
      $url = $item['url'];
      /* @var \Drupal\Core\Url $item */
      if ($url->getRouteName() === '<front>' && \Drupal::routeMatch()->getRouteName() !== 'dept_homepage.homepage_controller_default') {
        /* @var \Drupal\dept_core\DepartmentManager $dept_manager */
        $dept_manager = \Drupal::service('department.manager');
        $current_dept = $dept_manager->getCurrentDepartment();
        $item['url'] = Url::fromUri($current_dept->url());
      }
    }
  }

  if ($variables['menu_name'] === 'footer' && !empty($variables['items'])) {
    // Add a menu link to the end of the menu with a link to the
    // accessibility statement defined in the group field value.
    $dept = \Drupal::service('department.manager')->getCurrentDepartment();

    // @phpstan-ignore-next-line
    if (empty($dept)) {
      return;
    }

    // Footer menu doesn't vary much at all so use a very broad context.
    // See https://www.drupal.org/docs/drupal-apis/cache-api/cache-contexts#core-contexts

    if (($accessibility_statement = $dept->accessibilityStatement()) !== NULL && $accessibility_statement instanceof NodeInterface) {
      // See MenuLinkTree->buildItems() which this imitates.
      $menu_link = [
        'title' => 'Accessibility statement',
        'url' => Url::fromRoute('entity.node.canonical', ['node' => $accessibility_statement->id()]),
        'is_collapsed' => FALSE,
        'is_expanded' => FALSE,
        'in_active_trail' => FALSE,
        'attributes' => new Attribute(),
      ];

      $cache_tags[] = 'node:' . $accessibility_statement->id();

      if (!empty($variables['#cache']['tags'])) {
        $variables['#cache']['tags'] = Cache::mergeTags($cache_tags, $variables['#cache']['keys']);
      }

      $variables['items'][] = $menu_link;
      $variables['#cache']['tags'] = $cache_tags;
    }

  }
}

/**
 * Function that adds department object metadata to
 * preprocess variables for use in templates.
 */
function dept_core_append_dept_info_for_templates(array &$variables) {
  $host = \Drupal::request()->getHost();

  switch ($host) {
    case 'www.northernireland.gov.uk':
      $variables['department']['id'] = 'nigov';
      $variables['department']['name'] = 'The Northern Ireland Executive';
      return;

    case 'www.executiveoffice-ni.gov.uk':
      $variables['department']['id'] = 'executiveoffice';
      $variables['department']['name'] = 'The Executive Office';
      return;

    case 'www.daera-ni.gov.uk':
      $variables['department']['id'] = 'daera';
      $variables['department']['name'] = 'Department of Agriculture, Environment and Rural Affairs';
      return;

    case 'www.communities-ni.gov.uk':
      $variables['department']['id'] = 'communities';
      $variables['department']['name'] = '	Department for Communities';
      return;

    case 'www.education-ni.gov.uk':
      $variables['department']['id'] = 'education';
      $variables['department']['name'] = 'Department for Education';
      return;

    case 'www.economy-ni.gov.uk':
      $variables['department']['id'] = 'economy';
      $variables['department']['name'] = 'Department for the Economy';
      return;

    case 'www.finance-ni.gov.uk':
      $variables['department']['id'] = 'finance';
      $variables['department']['name'] = 'Department of Finance';
      return;

    case 'www.infrastructure-ni.gov.uk':
      $variables['department']['id'] = 'infrastructure';
      $variables['department']['name'] = 'Department for Infrastructure';
      return;

    case 'www.health-ni.gov.uk':
      $variables['department']['id'] = 'health';
      $variables['department']['name'] = 'Department for Health';
      return;

    case 'www.justice-ni.gov.uk':
      $variables['department']['id'] = 'justice';
      $variables['department']['name'] = 'Department of Justice';
      return;

    default:
      break;
  }

  $dept_manager = \Drupal::service('department.manager');
  /** @var \Drupal\dept_core\Entity\Department $dept */
  $dept = $dept_manager->getCurrentDepartment();

  if (is_null($dept)) {
    return;
  }
  // Object properties/method values set as preprocess variables
  // to remain compliant with Twig sandbox configuration which
  // prohibits direct access to many object properties (security reasons)
  // except for those on a pre-defined method allow-list.
  // See https://chromatichq.com/insights/custom-entity-methods-twig-templates/
  // and https://www.drupal.org/forum/support/theme-development/2018-09-05/twig-sandbox-security-error-when-calling-object-method
  $variables['department']['id'] = $dept->id();
  $variables['department']['name'] = $dept->name();
}

/**
 * Implements hook_entity_insert().
 */
function dept_core_entity_insert(EntityInterface $entity) {
  // When a Domain field is created in a content type, create/update the form
  // display and set those fields to use a select element which prevents the
  // WSOD when creating new content of that type because, by default, the form
  // display will use Chosen, entity reference etc if not explicitly set by the
  // site-builder.
  if ($entity instanceof FieldConfig && in_array($entity->getName(), ['field_domain_source', 'field_domain_access'])) {
    $entity_form_display = EntityFormDisplay::load($entity->getTargetEntityTypeId() . '.' . $entity->getTargetBundle() . '.default');

    if (empty($entity_form_display)) {
      $entity_form_display = EntityFormDisplay::create([
        'targetEntityType' => $entity->getTargetEntityTypeId(),
        'bundle' => $entity->getTargetBundle(),
        'mode' => 'default',
        'status' => TRUE,
      ]);
    }

    $entity_form_display->setComponent($entity->getName(), [
      'type' => 'options_select',
      'region' => 'content',
    ]);

    $entity_form_display->save();
  }
}

/**
 * Implements hook_entity_update().
 */
function dept_core_entity_update(EntityInterface $entity) {

  // Update the corresponding Department label when a Domain label is updated.
  if ($entity->getEntityType()->id() == 'domain' && !$entity->isNew()) {
    $department = \Drupal::entityTypeManager()->getStorage('department')->load($entity->id());

    if (!empty($department) && $department->label() !== $entity->label()) {
      // @phpstan-ignore-next-line
      $department->set('label', $entity->label());
      $department->save();
    }
  }
}

/**
 * Implements hook_token_info().
 */
function dept_core_token_info() {

  $types['departmental'] = [
    'name' => t("Departmental"),
    'description' => t("Departmental site tokens"),
  ];

  $tokens['all-departments-links'] = [
    'name' => t("Departments links"),
    'description' => t("Displays a list of links to each department site"),
  ];

  $tokens['related-sites'] = [
    'name' => t("Related sites"),
    'description' => t("Displays a list of related and departmental sites"),
  ];

  return [
    'types' => $types,
    'tokens' => [
      'departmental' => $tokens,
    ],
  ];
}

/**
 * Implements hook_tokens().
 */
function dept_core_tokens($type, $tokens, array $data, array $options, $bubbleable_metadata) {

  $replacements = [];

  if ($type === 'departmental') {
    foreach ($tokens as $name => $original) {
      switch ($name) {
        // Display a list of links to each Department.
        case 'all-departments-links':
          $links = dept_core_department_links();

          $link_list = [
            '#theme' => 'item_list',
            '#list_type' => 'ul',
            '#items' => $links,
            '#cache' => [
              'tags' => [
                'department_list',
              ],
            ],
          ];

          $replacements[$original] = \Drupal::service('renderer')->render($link_list);

          break;

        case 'related-sites':
          $links = dept_core_department_links();
          $menu = \Drupal::menuTree()->load('footer-related-sites', new MenuTreeParameters());
          $classes = [];
          $index = 0;

          foreach ($menu as $item) {
            if ($item->link->isEnabled()) {
              $index++;
              if ($index == 1) {
                $classes[] = 'related-sites-first';
              }

              if ($index == count($menu)) {
                $classes[] = 'related-sites-last';
              }
              $links[] = [
                '#wrapper_attributes' => ['class' => implode(' ', $classes)],
                Link::fromTextAndUrl($item->link->getTitle(), $item->link->getUrlObject())->toRenderable()
              ];
              $classes = [];
            }
          }

          $link_list = [
            '#theme' => 'item_list',
            '#list_type' => 'ul',
            '#attributes' => ['class' => 'related-websites-list'],
            '#items' => $links,
            '#cache' => [
              'tags' => [
                'config:system.menu.footer-related-sites',
                'department_list',
              ],
            ],
          ];

          $replacements[$original] = \Drupal::service('renderer')->render($link_list);

          break;
      }
    }
  }

  return $replacements;
}

/**
 * Return a list of Department links.
 *
 * @return array
 *   List of active department links, sorted by weight.
 */
function dept_core_department_links(): array {
  $dept_storage = \Drupal::entityTypeManager()->getStorage('department');

  $department_ids = $dept_storage->getQuery()
    ->condition('status', TRUE)
    ->sort('weight')
    ->accessCheck(FALSE)
    ->execute();

  $departments = $dept_storage->loadMultiple($department_ids);
  $links = [];
  $classes = [];
  $index = 0;

  foreach ($departments as $department) {
    $index++;
    if ($index == 1) {
      $classes[] = 'department-sites-first';
    }

    if ($index == count($departments)) {
      $classes[] = 'department-sites-last';
    }

    $links[] = [
      '#wrapper_attributes' => ['class' => implode(' ', $classes)],
      // @phpstan-ignore-next-line
      Link::fromTextAndUrl($department->label(), Url::fromUri($department->url()))->toRenderable()
    ];
    $classes = [];
  }
  return $links;
}

/**
 * Implements hook_form_alter().
 */
function dept_core_form_alter(&$form, FormStateInterface $form_state, $form_id) {

  if ($form_id === 'entity_form_display_edit_form') {
    // Set the Domain module fields to use the select widget. Setting it to
    // Chosen, autocomplete, etc. will throw an error when a user tries to add
    // content using the content type.
    foreach (['source', 'access'] as $domain_field_id) {
      $form['fields']['field_domain_' . $domain_field_id]['plugin']['type']['#default_value'] = 'options_select';
    }
  }

  if ($form_id === 'views_exposed_form') {
    if (!empty($form['dept'])) {
      /** @var \Drupal\dept_core\DepartmentManager $dept_manager */
      $dept_manager = \Drupal::service('department.manager');
      /** @var \Drupal\dept_core\Entity\Department $current_dept */
      $current_dept = $dept_manager->getCurrentDepartment();
      $current_user = \Drupal::entityTypeManager()->getStorage('user')->load(\Drupal::currentUser()->id());

      if (!$current_user->hasRole('administrator')) {
        $form['dept']['#value'] = $current_dept->id();
        hide($form['dept']);
        return;
      }

      // Fetch current user's assigned domains.
      $user_domains = $current_user->get('field_domain_access')->referencedEntities();

      // If the user doesn't have top level domain permissions or no assigned domains, hide this filter option.
      if (empty($user_domains)) {
        $form['dept']['#value'] = $current_dept->id();
        hide($form['dept']);
        return;
      }

      // Change to select list of known depts.
      $depts = $dept_manager->getAllDepartments();

      $form['dept'] = [
        '#type' => 'select',
        '#sort_options' => TRUE,
        '#required' => FALSE,
        '#empty_value' => FALSE,
      ];

      foreach ($user_domains as $domain) {
        $dept = $depts[$domain->id()];
        $form['dept']['#options'][$dept->id()] = $dept->label();
      }

      // #default_value doesn't work for select elements
      // see web/core/lib/Drupal/Core/Render/Element/Select.php
      // So instead, here we bodge the pre-selected value with either
      // the current dept id (if no selection) or let the user
      // pick their own which then takes precedent.
      $dept_selection = \Drupal::request()->query->get('dept');
      if (empty($dept_selection)) {
        $form['dept']['#value'] = $current_dept->id();
      }
    }
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function dept_core_form_node_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Attach admin theme fixes.
  $form['#attached']['library'][] = 'nicsdru_dept_theme/admin-forms';

  if (\Drupal::currentUser()->hasPermission('view departments on entity forms') === FALSE) {
    dept_core_set_entity_domain_defaults($form);
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function dept_core_form_media_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if (\Drupal::currentUser()->hasPermission('view departments on entity forms') === FALSE) {
    dept_core_set_entity_domain_defaults($form);
  }
}

/**
 * Function to hide domain access/source form elements
 * and set a default value for both of the current department.
 */
function dept_core_set_entity_domain_defaults(&$form) {
  $dept = \Drupal::service('department.manager')->getCurrentDepartment();

  foreach (['field_domain_access', 'field_domain_source'] as $element_id) {
    if (!empty($form[$element_id])) {
      // #default_value does not pass later validation. Odd but
      // shouldn't matter as the user won't be able to see the form options.
      $form[$element_id]['widget']['#value'] = $dept->id();
      // hide() doesn't hide the wrapping container element.
      // Changing the element type does.
      $form[$element_id]['#type'] = 'hidden';
    }
  }
}

/**
 * Implements hook_clientside_validation_should_validate().
 */
function dept_core_clientside_validation_should_validate($element, FormStateInterface &$form_state, $form_id) {
  // If node or media form, clientside validation won't validate.
  if (str_starts_with($form_id, 'node_')
    || str_starts_with($form_id, 'media_')) {
    return TRUE;
  }
}

/**
 * Implements hook_page_attachments().
 */
function dept_core_page_attachments(array &$attachments) {
  $route_name = \Drupal::routeMatch()->getRouteName();
  // Check if it is an admin page.
  if (\Drupal::service('router.admin_context')->isAdminRoute()) {
    // Attach extra custom css for admin menu.
    $attachments['#attached']['library'][] = 'nicsdru_dept_theme/admin-content';
  }

  if ($route_name === 'dept_homepage.homepage_controller_default') {
    $attachments['#attached']['library'][] = 'dept_core/main_menu_navigation';
  }

  // Add contextual links to layout builder for non admin accounts.
  if (!in_array($route_name, ['layout_builder.overrides.node.view', 'layout_builder.defaults.node.view'])) {
    if (!in_array('administrator', \Drupal::currentUser()->getRoles()) && isset($attachments['#attached']['library'])) {
      $attachments['#attached']['library'] = array_diff($attachments['#attached']['library'], [
        'contextual/drupal.contextual-links',
        'contextual/drupal.contextual-toolbar'
      ]);
    }
  }

}

/**
 * Implements hook_preprocess_HOOK() for file_managed_file.
 */
function dept_core_preprocess_file_managed_file(&$variables) {
  if (empty($variables['element']['remove_button'])) {
    return;
  }

  if (\Drupal::currentUser()->hasPermission('delete any file') === FALSE) {
    unset($variables['element']['remove_button']);
  }
}

/**
 * Implements hook_theme_registry_alter().
 */
function dept_core_theme_registry_alter(&$theme_registry) {
  $theme_registry['fieldset']['theme path'] = 'themes/custom/nicsdru_dept_theme';
  $theme_registry['fieldset']['path'] = 'themes/custom/nicsdru_dept_theme/templates/form';
  $fieldset_suggestions = drupal_find_theme_templates($theme_registry, '.html.twig', 'themes/custom/nicsdru_dept_theme/templates/form');
  foreach ($fieldset_suggestions as $key => $suggestion) {
    if (!empty($suggestion['base hook']) && $suggestion['base hook'] === 'theme path') {
      $suggestion = array_merge($theme_registry['fieldset'], $suggestion);
      $theme_registry[$key] = $suggestion;
    }
  }
}

/**
 * Implements hook__simple_sitemap_arbitrary_links_alter().
 */
function dept_core_simple_sitemap_arbitrary_links_alter(array &$arbitrary_links, SimpleSitemapInterface $sitemap) {
  $department = \Drupal::service('department.manager')->getDepartment($sitemap->id());

  // Generate the homepage link in sitemap instead of using the
  // 'Replace default front page URL to base domain URL.' option in Domain
  // Simple Sitemap which won't work with our custom homepage controller.
  if (!is_null($department)) {
    $arbitrary_links[] = [
      'url' => $department->url(),
      'priority' => '0.5',
      // An ISO8601 formatted date.
      'lastmod' => date('r'),
      'changefreq' => 'yearly',
    ];
  }

}

/**
 * Implements hook_simple_sitemap_links_alter().)
 */
function dept_core_simple_sitemap_links_alter(array &$links, SimpleSitemapInterface $sitemap) {
  $department = \Drupal::service('department.manager')->getDepartment($sitemap->id());

  if (!is_null($department)) {
    $domain = $department->url();
    // Replace generated domain with the department config domain.

    foreach ($links as $key => $link) {
      $link['url'] = $domain . substr($link['url'], strpos($link['url'], '/', 3));
    }
  }

}

/**
 * Implements hook_toolbar_alter().
 */
function dept_core_toolbar_alter(&$items) {
  // Remove the 'Edit' contextual link from the top admin toolbar.
  unset($items["contextual"]);
}

/**
 * Implements hook_entity_view_alter().
 */
function dept_core_entity_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {
  // Remove all contextual links for non-admins.
  if (!in_array('administrator', \Drupal::currentUser()->getRoles())) {
    if (!in_array(\Drupal::routeMatch()->getRouteName(), [
      'layout_builder.overrides.node.view',
      'layout_builder.defaults.node.view'
    ])) {
      unset($build['#contextual_links']);
    }
  }
}

/**
 * Implements hook_library_info_alter().
 */
function dept_core_library_info_alter(&$libraries, $extension) {
  // Remove the Domain Source library as we hide the options from non-admins and
  // the library script errors when trying to access the removed DOM element.
  // We cannot remove this on a per-role basis as aggregation would override it.
  if (array_key_exists('drupal.domain_source', $libraries)) {
    unset($libraries['drupal.domain_source']);
  }
}

/**
 * Implements hook_views_pre_render().
 */
function dept_core_views_pre_render(ViewExecutable $view) {
  // Only page displays, not admin routes.
  if ($view->display_handler->getPluginId() !== 'page'
    || \Drupal::service('router.admin_context')->isAdminRoute()) {
    return;
  }

  // Skip AJAX requests (exposed filters, etc.).
  if (\Drupal::request()->isXmlHttpRequest()) {
    return;
  }

  // Split current request path and the view display's base path into segments.
  $current_path = \Drupal::service('path.current')->getPath();
  $req_segments = array_values(array_filter(explode('/', trim($current_path, '/')), 'strlen'));

  $display_path = (string) $view->display_handler->getOption('path');
  $base_segments = array_values(array_filter(explode('/', trim($display_path, '/')), 'strlen'));

  // If the request doesn't start with the display path, we can let it go.
  for ($i = 0, $b = count($base_segments); $i < $b; $i++) {
    if (empty($req_segments[$i]) || $req_segments[$i] !== $base_segments[$i]) {
      return;
    }
  }

  // Tail after the display path = actual URL segments provided.
  $tail_segments = array_slice($req_segments, count($base_segments));

  // Optionally drop pager tails like /page/2.
  if (!empty($tail_segments) && $tail_segments[0] === 'page') {
    array_shift($tail_segments);

    if (!empty($tail_segments) && is_int($tail_segments[0])) {
      array_shift($tail_segments);
    }
  }

  $tail_count = count($tail_segments);

  // How many contextual filters are configured on this display?
  $configured_args = $view->display_handler->getHandlers('argument');
  $expected_count  = count($configured_args);

  // If the display has no contextual filters, any tail following it is junk.
  if ($expected_count === 0 && $tail_count > 0) {
    throw new NotFoundHttpException();
  }

  // If too many tail segments for this display, consider it junk too.
  if ($tail_count > $expected_count) {
    throw new NotFoundHttpException();
  }

  // Domain checks (only if the Domain module is installed & services exist).
  $module_has_domain = \Drupal::moduleHandler()->moduleExists('domain');
  $has_negotiator = \Drupal::hasService('domain.negotiator');
  $has_domain_storage = \Drupal::entityTypeManager()->hasDefinition('domain');

  if ($module_has_domain && $has_negotiator && $has_domain_storage) {
    // Only enforce domain semantics if at least one tail segment exists.
    if ($tail_count >= 1) {
      $first_url_arg = strtolower($tail_segments[0]);

      $account  = \Drupal::currentUser();
      $is_admin = $account->hasPermission('bypass node access');

      if ($is_admin) {
        // Admins: first URL arg must be one of the configured domain IDs.
        $storage = \Drupal::entityTypeManager()->getStorage('domain');
        // Cache this list per-request to avoid repeated loads.
        static $valid_ids = NULL;

        if ($valid_ids === NULL) {
          $valid_ids = array_map('strtolower', array_keys($storage->loadMultiple()));
        }

        if (!in_array($first_url_arg, $valid_ids, TRUE)) {
          throw new NotFoundHttpException();
        }
      }
      else {
        // Non-admins: first URL arg must equal the ACTIVE domain id.
        $active = \Drupal::service('domain.negotiator')->getActiveDomain();
        $active_id = $active ? strtolower($active->id()) : '';

        if ($first_url_arg !== $active_id) {
          throw new NotFoundHttpException();
        }
      }
    }
  }
}
