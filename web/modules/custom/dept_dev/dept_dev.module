<?php

/**
 * @file
 * Primary module hooks for dept_dev module.
 *
 * @DCG
 * This file is no longer required in Drupal 8.
 * @see https://www.drupal.org/node/2217931
 */

use Drupal\Core\Url;
use Drupal\dept_dev\DeptDevLazyBuilders;

/**
 * Implements hook_toolbar().
 */
function dept_dev_toolbar() {
  $items = [];

  $domains = \Drupal::service('entity_type.manager')->getStorage('domain')->loadMultiple();
  $lando_hostnames = \Drupal::config('departmental_devtools.settings.toolbar_sites')->get('lando_hostname');
  $lando_protocol = \Drupal::config('departmental_devtools.settings.toolbar_sites')->get('lando_protocol');
  $links = [];

  foreach ($domains as $domain) {
    $url = $domain->getPath();
    if ($lando_hostnames) {
      $protocol = ($lando_protocol) ? 'http' : 'https';

      // Exception for Dept Admin domain, otherwise just replace gov.uk host.
      if ($url === 'https://www.main-bvxea6i-dnvkwx4xjhiza.uk-1.platformsh.site/') {
        $url = "$protocol://dept.lndo.site/";
      }
      else {
        $url = preg_replace('/https?:\/\/(www.)?(.*)(gov.uk)/', "$protocol://$2lndo.site", $url);
      }
    }
    $links[$domain->id()] = [
      'title' => $domain->label(),
      'url' => Url::fromUri($url),
    ];
  }

  $menu_links = [
    '#theme' => 'links__toolbar_sites',
    '#links' => $links,
    '#attributes' => [
      'class' => ['toolbar-menu'],
    ],
  ];

  $items['sites'] = [
    '#type' => 'toolbar_item',
    'tab' => [
      '#type' => 'link',
      '#title' => t('Sites'),
      '#url' => Url::fromRoute('domain.admin'),
      '#attributes' => [
        'title' => t('Departmental sites'),
        'class' => ['toolbar-icon', 'toolbar-icon-menu'],
      ],
    ],
    'tray' => [
      '#heading' => t('Departmental sites'),
      'children' => $menu_links,
      'configuration' => [
        '#type' => 'link',
        '#title' => 'Configure',
        '#url' => Url::fromRoute('departmental_devtools.settings.toolbar.sites'),
        // Just borrowing 'Shortcuts' class to move this link to the right.
        '#attributes' => ['class' => ['edit-shortcuts']],
      ],
    ],
    '#cache' => [
      'tags' => ['departmental_devtools_tools_sites'],
    ],
    '#weight' => 100,
  ];

  return $items;
}


function dept_dev_preprocess_page($variables) {
  $node_source_link = \Drupal::config('departmental_devtools.settings')->get('node_source_link');

  if ($node_source_link) {
    $dbcon = \Drupal::database();

    /** @var \Drupal\node\NodeInterface $node */
    $node = \Drupal::routeMatch()->getParameter('node');
    if ($node instanceof \Drupal\node\NodeInterface) {
      $mapping_table = 'migrate_map_node_' . $node->bundle();
      // TODO: Check mapping table exists for the current bundle.

      // Lookup Destination node using current nid and extract D7 nid and group
      $query = $dbcon->select($mapping_table, 'mt')
        ->condition('destid1', $node->id(), '=');
      $query->addField('mt', 'sourceid2', 'd7nid');
      $query->addField('mt', 'sourceid3', 'domains');

      $result = $query->execute();
      $node_migration_data = $result->fetch();

      $dept_manager = \Drupal::service('department.manager');
      // TODO: Iterate all domains and generate links.
      $dept = $dept_manager->getDepartment('group_' . $node_migration_data->domains);
      $node_link = $dept->url() . 'node/' . $node_migration_data->d7nid;
    }
  }
}
