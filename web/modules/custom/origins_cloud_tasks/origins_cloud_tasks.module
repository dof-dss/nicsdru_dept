<?php

/**
 * @file
 * Primary module hooks for Origins Cloud Tasks module.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\origins_cloud_tasks\CronTask;
use Drupal\scheduled_transitions\Entity\ScheduledTransitionInterface;

/**
 * Implements hook_entity_insert().
 */
function origins_cloud_tasks_entity_insert(EntityInterface $entity) {

  if ($entity instanceof ScheduledTransitionInterface) {

    $moderation_state = $entity->get('moderation_state')->getString();

    if ($moderation_state == 'published' || $moderation_state == 'archived') {
      // TODO: GCT only allow tasks up to 30 days in advance. If the
      // transition_on date is greater then save to a table for processing by
      // regular cron, which will add the Cloud Task when it's within 30 days.
      $transition_on = $entity->get('transition_on')->getString();
      $task_id = $entity->bundle() . '--' . $entity->id();

      $task_manager = \Drupal::service('origins_cloud_tasks.manager');

      $task = new CronTask($task_id, $transition_on);
      $task_manager->createTask($task);
    }
  }

}

/**
 * Implements hook_entity_presave().
 */
function origins_cloud_tasks_entity_update(EntityInterface $entity) {

  if ($entity instanceof ScheduledTransitionInterface) {

    $moderation_state = $entity->get('moderation_state')->getString();

    if ($moderation_state == 'published' || $moderation_state == 'archived') {
      // TODO: GCT only allow tasks up to 30 days in advance. If the
      // transition_on date is greater then save to a table for processing by
      // regular cron, which will add the Cloud Task when it's within 30 days.
      $transition_on = $entity->get('transition_on')->getString();
      $task_id = $entity->bundle() . '--' . $entity->id();

      $task_manager = \Drupal::service('origins_cloud_tasks.manager');

      $task = new CronTask($task_id, $transition_on);
      $task_manager->createTask($task);
    }
  }

}
