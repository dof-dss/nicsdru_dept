<?php

/**
 * @file
 * Primary module hooks for Origins Cloud Tasks Scheduled Transitions module.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Link;
use Drupal\origins_cloud_tasks\CronTask;
use Drupal\scheduled_transitions\Entity\ScheduledTransitionInterface;

/**
 * Implements hook_entity_insert().
 */
function origins_cloud_tasks_scheduled_transitions_entity_insert(EntityInterface $entity) {
  origins_cloud_tasks_scheduled_transitions_process($entity);
}

/**
 * Implements hook_entity_presave().
 */
function origins_cloud_tasks_scheduled_transitions_entity_presave(EntityInterface $entity) {
  if (!$entity->isNew()) {
    origins_cloud_tasks_scheduled_transitions_process($entity);
  }
}

/**
 * Process new and existing Cloud Tasks for scheduled transitions.
 */
function origins_cloud_tasks_scheduled_transitions_process($entity) {
  if ($entity instanceof ScheduledTransitionInterface) {

    $moderation_state = $entity->get('moderation_state')->getString();

    if ($moderation_state == 'published' || $moderation_state == 'archived') {
      $transition_on = $entity->get('transition_on')->getString();
      $task_id = $entity->bundle() . '--' . $entity->id();

      $task_manager = \Drupal::service('origins_cloud_tasks.manager');

      // If updating a schedule, delete the existing task before recreating it.
      if (!$entity->isNew()) {
        $task_manager->deleteTask($task_id);
      }

      $task = new CronTask($task_id, $transition_on);
      try {
        $task_manager->createTask($task);
      }
      catch (\Exception $ex) {
        \Drupal::messenger()->addError($ex->getMessage());
        \Drupal::logger('origins_cloud_tasks')->error($ex->getMessage());
      }
    }
  }
}

/**
 * Implements hook_cron().
 */
function origins_cloud_tasks_scheduled_transitions_cron() {
  // Interval is every 28 days as Cloud Tasks can only be scheduled up to 30 days.
  $interval = 120;
//  $interval = 86400 * 28;

  $next_execution = \Drupal::state()->get('origins_cloud_tasks_scheduled_transitions_cron.next_execution', 0);
  $request_time = \Drupal::time()->getRequestTime();
  if ($request_time >= $next_execution) {

    $database = \Drupal::database();
    $task_manager = \Drupal::service('origins_cloud_tasks.manager');


    \Drupal::state()->set('cron_example.next_execution', $request_time + $interval);
  }

}

/**
 * Implements hook_origins_cloud_tasks_list_rows().
 */
function origins_cloud_tasks_scheduled_transitions_origins_cloud_tasks_list_rows($rows) {
  // Alter task row to change the name to the transition ID and a link to the node.
  $entity_type_manager = \Drupal::entityTypeManager();
  foreach ($rows as &$row) {
    $task_name = basename($row['name']);

    if (str_starts_with($task_name, 'scheduled_transition--')) {
      $id = substr($task_name, 22);
      /** @var \Drupal\scheduled_transitions\Entity\ScheduledTransitionInterface $scheduled_transition */
      $scheduled_transition = $entity_type_manager->getStorage('scheduled_transition')->load($id);
      $entity = $scheduled_transition->getEntity();

      if ($entity) {
        $row['data'] = [
          [
            'data' => ['#markup' => 'Scheduled transition (' . $id . ')' . ' for ' . Link::fromTextAndUrl($entity->label(), $entity->toUrl())->toString()],
          ],
          $row['schedule'],
          $row['url'],
        ];
      }
    }
  }
  return $rows;
}
