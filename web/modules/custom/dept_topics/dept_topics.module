<?php

/**
 * @file
 * Departmental topics/subtopics module for controlling display
 * of topics, subtopics and related content.
 */

use Drupal\Core\Url;
use Drupal\node\NodeInterface;

/**
 * Implements hook_moderation_sidebar_alter().
 */
function dept_topics_moderation_sidebar_alter(&$build, &$context) {

  if ($context instanceof NodeInterface && $context->bundle() === "topic") {
    $bundle_fields = \Drupal::getContainer()->get('entity_field.manager')->getFieldDefinitions('node', 'topic');
    $field_definition = $bundle_fields['field_topic_content'];
    $target_bundles = $field_definition->getSetting('handler_settings')['target_bundles'];

    foreach ($target_bundles as $bundle => $label) {
      $build['actions']['secondary']['add_' . $bundle] = [
        '#title' => 'Add ' . $label,
        '#type' => 'link',
        '#url' => Url::fromRoute('node.add', ['node_type' => $bundle], ['query' => ['topic' => $context->id()]]),
        '#attributes' => ['class' => ['moderation-sidebar-link', 'button']],
      ];
    }
  }
}

/**
 * Implements hook_cron().
 */
function dept_topics_cron() {
  $dbConn = \Drupal::database();

  // Fetch the parent node ID's of referenced topic content nodes that no
  // longer exist.
  $nids = $dbConn->query("
    SELECT nftc.entity_id FROM node__field_topic_content nftc
    LEFT JOIN node n
    ON nftc.field_topic_content_target_id = n.nid
    WHERE n.nid IS NULL;
  ")->fetchCol(0);

  if (empty($nids)) {
    return;
  }

  // Remove duplicate parent nids and create a list of node cache tags.
  $cids = array_map(function ($nid) {
    return 'values:node:' . $nid;
  }, array_unique($nids));
  // Remove any topic content reference field entries that point to deleted
  // nodes.
  $dbConn->query("
    DELETE nftc FROM node__field_topic_content nftc
    LEFT JOIN node n
    ON nftc.field_topic_content_target_id = n.nid
    WHERE n.nid IS NULL;
  ")->execute();

  $dbConn->query("
    DELETE nrftc FROM node_revision__field_topic_content nrftc
    LEFT JOIN node n
    ON nrftc.field_topic_content_target_id = n.nid
    WHERE n.nid IS NULL;
  ")->execute();

  // Check the caching of the entity info to update the topic content reference
  // field on the node edit form.
  $cache_entity = \Drupal::service('cache.entity');
  $cache_entity->deleteMultiple($cids);
}

/**
 * Implements hook_preprocess_node().
 */
function dept_topics_preprocess_node(array &$variables) {
  $bundle_fields = \Drupal::getContainer()->get('entity_field.manager')->getFieldDefinitions('node', 'topic');
  $field_definition = $bundle_fields['field_topic_content'];
  $target_bundles = $field_definition->getSetting('handler_settings')['target_bundles'];

  if (in_array($variables['node']->bundle(), $target_bundles)) {
    $parent = fetch_parent_node($variables['node']->id(), 1);

    $variables['topics']['top'] = [
      '#type' => 'link',
      '#title' => 'The Top level term',
      '#url' => URL::fromRoute('entity.node.canonical', ['node' => $parent->nid]),
      '#suffix' => ',&nbsp;'
    ];

    $variables['topics']['parent'] = [
      '#type' => 'link',
      '#title' => $parent->title,
      '#url' => URL::fromRoute('entity.node.canonical', ['node' => $parent->nid]),
    ];
  }

}

function fetch_parent_node($nid, $depth = NULL) {
  $dbConn = \Drupal::database();
  $count = 0;

  do {
    $parent = $dbConn->query("SELECT n.nid, nfd.title FROM node n
        LEFT JOIN node_field_data nfd
        ON nfd.nid = n.nid
        LEFT JOIN node__field_topic_content ftc
        ON ftc.entity_id = n.nid
        WHERE ftc.field_topic_content_target_id = :nid", [':nid' => $nid])->fetch();

    $count++;
    $nid = $parent->nid;
  } while ($depth > $count);

  return $parent;
}
