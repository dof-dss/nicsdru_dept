<?php

/**
 * @file
 * Departmental topics/subtopics module for controlling display
 * of topics, subtopics and related content.
 */

use Drupal\Component\Utility\NestedArray;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Url;
use Drupal\node\Entity\Node;
use Drupal\node\NodeInterface;

require_once __DIR__ . '/inc/hook_alter.inc';

const HISTORIC_ENVIRONMENT_NID = 409882;

/**
 * Implements hook_help().
 */
function dept_topics_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the antibot module.
    case 'help.page.dept_topics':
      $output = '';
      $output .= '<h3>' . t('Help') . '</h3>';
      $output .= '<p>' . t('For a comprehensive overview of the Topics system please see the readme file in the module root.') . '</p>';
      return $output;
  }
}

/**
 * Implements hook_cron().
 */
function dept_topics_cron() {
  $dbConn = \Drupal::database();

  // Fetch the parent node ID's of referenced topic content nodes that no
  // longer exist.
  $nids = $dbConn->query("
    SELECT nftc.entity_id FROM node__field_topic_content nftc
    LEFT JOIN node n
    ON nftc.field_topic_content_target_id = n.nid
    WHERE n.nid IS NULL;
  ")->fetchCol(0);

  if (empty($nids)) {
    return;
  }

  // Remove duplicate parent nids and create a list of node cache tags.
  $cids = array_map(function ($nid) {
    return 'values:node:' . $nid;
  }, array_unique($nids));
  // Remove any topic content reference field entries that point to deleted
  // nodes.
  $dbConn->query("
    DELETE nftc FROM node__field_topic_content nftc
    LEFT JOIN node n
    ON nftc.field_topic_content_target_id = n.nid
    WHERE n.nid IS NULL;
  ")->execute();

  $dbConn->query("
    DELETE nrftc FROM node_revision__field_topic_content nrftc
    LEFT JOIN node n
    ON nrftc.field_topic_content_target_id = n.nid
    WHERE n.nid IS NULL;
  ")->execute();

  // Check the caching of the entity info to update the topic content reference
  // field on the node edit form.
  $cache_entity = \Drupal::service('cache.entity');
  $cache_entity->deleteMultiple($cids);
}

/**
 * Implements hook_entity_delete().
 */
function dept_topics_entity_delete(EntityInterface $entity) {

  // Removes the node from a topic/subtopic child content entity reference
  // list when that node is deleted.
  if ($entity instanceof NodeInterface) {
    /** @var \Drupal\dept_topics\TopicManager $topic_manager */
    $topic_manager = \Drupal::service('topic.manager');

    $bundle = $entity->bundle();
    $child_bundles = $topic_manager->getTopicChildNodeTypes();

    if (in_array($bundle, $child_bundles)) {
      $parents = $topic_manager->getParentNodes($entity->id());
      $node_manager = \Drupal::entityTypeManager()->getStorage('node');

      // Remove all topic content references for this node in topic/subtopic nodes.
      foreach ($parents as $parent => $data) {
        $topic_node = $node_manager->load($parent);
        $child_refs = $topic_node->get('field_topic_content');

        // Allows us to only save Topic nodes that have an entry for this content.
        $has_child_entry = FALSE;

        for ($i = 0; $i < $child_refs->count(); $i++) {
          // @phpstan-ignore-next-line
          if ($child_refs->get($i)->target_id == $entity->id()) {
            $child_refs->removeItem($i);
            $has_child_entry = TRUE;
            $i--;
          }
        }

        if ($has_child_entry) {
          $topic_node->setRevisionLogMessage('Removed child: (' . $entity->id() . ') ' . $entity->label());
          $topic_node->save();
        }
      }
    }
  }

}

/**
 * Submit callback for automatic enabling of Domain Path.
 */
function dept_topics_enable_domain_path($form, FormStateInterface $form_state) {
  $dept = $form_state->getValue(['field_domain_access', '0', 'target_id']);
  if (!empty($dept)) {
    $form_state->setValue(['domain_path', $dept, 'pathauto'], 1);
  }
}

/**
 * Implements hook_entity_type_build().
 */
function dept_topics_entity_type_build(array &$entity_types) {
  // Set the default Core node form for our custom Form mode as
  // we don't need a custom class to override anything.
  $entity_types['node']->setFormClass('child_order', 'Drupal\node\NodeForm');
}

/**
 * Implements hook_preprocess_facets_item_list__links__publication_topics().
 */
function dept_topics_preprocess_facets_item_list__links__publication_topics(&$variables) {
  dept_topics_build_facet_topic_hierarchy($variables);
}

/**
 * Implements hook_preprocess_facets_item_list__links__consultation_topic().
 */
function dept_topics_preprocess_facets_item_list__links__consultation_topic(&$variables) {
  dept_topics_build_facet_topic_hierarchy($variables);
}

/**
 * Take a flat topics hierarchy and show/hide the required
 * topic facet link items based on the active facets.
 */
function dept_topics_build_facet_topic_hierarchy(&$variables) {
  $node_storage = \Drupal::entityTypeManager()->getStorage('node');
  /* @var \Drupal\dept_topics\TopicManager $topic_manager */
  $topic_manager = \Drupal::service('topic.manager');

  $active_values = $variables['facet']->getActiveItems();
  $topic_facet_nodes = $node_storage->loadMultiple($active_values);

  foreach ($variables['items'] as $id => $facet_item) {
    $item_nid = $facet_item['value']['#title']['#raw_value'];
    $is_active = $facet_item['value']['#title']['#is_active'] ?? FALSE;

    if ($is_active) {
      continue;
    }

    /* @var \Drupal\node\NodeInterface $topic_node */
    $topic_node = $node_storage->load($item_nid);

    $parent_topics = $topic_manager->getParentNodes($topic_node);

    if (empty($active_values)) {
      // Remove items if they have parent topics.
      if (!empty($parent_topics)) {
        unset($variables['items'][$id]);
      }
    }
    else {
      $topics_to_show = [];

      foreach ($topic_facet_nodes as $parent_facet_node) {
        // Find the subtopic ids for the selected facet topic.
        foreach ($parent_facet_node->get('field_topic_content')->referencedEntities() as $referenced_topic) {
          $topics_to_show[] = $referenced_topic->id();
        }
      }

      if (!in_array($item_nid, $topics_to_show)) {
        unset($variables['items'][$id]);
      }
    }
  }
}

/**
 * Topic/Subtopic node edit form validation callback.
 */
function dept_topics_validate_topics(&$form, FormStateInterface $form_state) {
  $topic_contents = $form_state->getValue('field_topic_content');
  $topic_manager = \Drupal::service('topic.manager');
  // @phpstan-ignore-next-line.
  $parent_node = $form_state->getFormObject()->getEntity();

  foreach ($topic_contents as $index => $topic_content) {
    // Ignore if the 'add new' or an empty field is encountered.
    if (!is_numeric($index) || empty($topic_content['target_id'])) {
      continue;
    }
    $nid = $topic_content['target_id'];
    $node = Node::load($nid);

    if (empty($node)) {
      continue;
    }

    if ($node->bundle() === 'subtopic') {
      $parent_nodes = $topic_manager->getParentNodes($node->id());
      // Warn the user if the subtopic has an assigned parent topic.
      if (!empty($parent_nodes)) {
        // If the child node parent ID doesn't match this node, warn the user.
        if (current($parent_nodes)->nid !== $parent_node->id()) {
          $element = $form['field_topic_content']['widget'][$index];
          $form_state->setError($element, t('This subtopic is already assigned to a parent topic and cannot be linked to multiple parent topics.'));
        }
      }
    }
  }
}

/**
 * Update the Linkit profile for topic content.
 */
function dept_topics_update_linkit_targets(&$form, FormStateInterface $form_state) {
  $values = $form_state->getValues();
  $field_bundles = NestedArray::getValue($values, ['settings', 'handler_settings', 'target_bundles'], $key_exists);

  if ($key_exists) {
    $file_storage = \Drupal::service('config.storage.sync');
    $active_storage = \Drupal::service('config.storage');

    $linkit_data = $active_storage->read('linkit.linkit_profile.topic_child_content');
    // Update the Linkit profile matcher bundles to that of the topic content field target bundles.
    $linkit_data['matchers'][array_key_first($linkit_data['matchers'])]['settings']['bundles'] = $field_bundles;

    // Save to both active and file config stores.
    $active_storage->write('linkit.linkit_profile.topic_child_content', $linkit_data);
    $file_storage->write('linkit.linkit_profile.topic_child_content', $linkit_data);

    \Drupal::messenger()->addMessage('Linkit profile (topic_child_content) updated, please ensure you export this configuration. ');
  }
}

/**
 * Implements hook_preprocess_field().
 */
function dept_topics_preprocess_field(&$variables, $hook) {
  $element = $variables['element'];

  if ($element['#field_name'] === 'field_topic_content') {
    foreach ($variables['items'] as $index => ['content' => $item]) {
      if (!empty($item['#entity']) && !$item['#entity']->isPublished()) {
        $state = $item['#entity']->get('moderation_state')->getString();
        $variables['items'][$index]['content']['#suffix'] = ' <span title="Moderation status" class="moderation-state--' . str_replace('_', '-', $state) . '">' . ucfirst(str_replace('_', ' ', $state)) . '</span>';
      }
    }
  }
}

/**
 * Implements hook_preprocess_field_multiple_value_form().
 */
function dept_topics_preprocess_field_multiple_value_form(&$variables) {
  if (!\Drupal::request()->isXmlHttpRequest()) {
    if ($variables["element"]["#field_name"] === 'field_topic_content') {
      // Add a moderation state label to each node in the entity reference form list.
      foreach ($variables["table"]["#rows"] as $delta => $row) {
        if (!empty($variables["element"][$delta]["target_id"]["#default_value"])) {
          if ($variables["element"][$delta]["target_id"]["#default_value"] instanceof NodeInterface) {
            $node = $variables["element"][$delta]["target_id"]["#default_value"];
          }
          else {
            $node = $variables["element"][$delta]["target_id"]["#default_value"][0];
          }

          $state = $node->get('moderation_state')->getString();

          if (!$node->isPublished()) {
            $variables["table"]["#rows"][$delta]['data'][1]['data']['#suffix'] = ' <span title="Moderation status" class="moderation-state moderation-state--' . str_replace('_', '-', $state) . '">' . ucfirst(str_replace('_', ' ', $state)) . '</span>';
          }
        }
      }
    }
  }
}

/**
 * Implements hook_theme().
 */
function dept_topics_theme() {
  return [
    'moderation_sidebar_info_section' => [
      'variables' => [
        'text' => '',
        'tag' => 'p',
      ],
    ],
  ];
}

/**
 * Implements hook_preprocess_views_view_field().
 */
function dept_topics_preprocess_views_view_field(&$variables) {
  $view = $variables['view'];
  $field = $variables['field'];

  if ($view->storage->id() == 'orphaned_content' && $field->field == 'former_parent') {
    $parent_id = $variables["row"]->_entity->get('former_parent')->getString();
    $parent = Node::load($parent_id);

    if ($parent) {
      $output = $parent->toLink($parent->label());
    }
    else {
      $output = $parent_id;
    }

    $variables['output'] = $output;
  }

  if ($view->storage->id() == 'orphaned_content' && $field->field == 'dropbutton') {

    $variables['output'] = [
      '#type' => 'operations',
      '#links' => [
        'edit' => [
          'title' => t('Edit orphan'),
          'url' => Url::fromRoute('entity.node.edit_form', ['node' => $variables["row"]->_entity->get('orphan')->getString()]),
        ],
      ],
      '#attached' => [
        'library' => ['core/drupal.dialog.ajax'],
      ],
    ];

  }
}
