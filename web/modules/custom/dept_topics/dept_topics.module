<?php

/**
 * @file
 * Departmental topics/subtopics module for controlling display
 * of topics, subtopics and related content.
 */

use Drupal\Core\Link;
use Drupal\dept_core\Department;
use Drupal\node\NodeInterface;
use Drupal\views\Plugin\views\query\QueryPluginBase;
use Drupal\views\ViewExecutable;
use Drupal\views\Views;

/**
 * Implements hook_preprocess_node().
 */
function dept_topics_preprocess_node(array &$variables) {
  $node = &$variables['node'];
  $view_mode = $variables['view_mode'];

  if (!$node instanceof NodeInterface) {
    return;
  }

  if ($node->bundle() === 'topic' && $view_mode === 'full') {

    $subtopics_to_display = dept_topics_subtopics_queue_for_topic($node);

    if (!empty($subtopics_to_display)) {
      foreach ($subtopics_to_display as $subtopic_id => $subtopic_title) {
        // Get subtopic content - try the draggableviews table first.
        $query = \Drupal::database()->select('draggableviews_structure', 'ds')
          ->fields('ds', ['entity_id'])
          ->condition('view_name', 'content_stacks')
          ->condition('view_display', 'subtopic_articles')
          ->condition('args', '["' . $subtopic_id . '"]')
          ->orderBy('weight', 'ASC');

        $ids = $query->execute()->fetchAllAssoc('entity_id');

        if (empty($ids)) {
          // If not sorted by draggableviews, then fall back to using the
          // service to fetch content for a subtopic.
          $content_links = \Drupal::service('dept_node.subtopics')->getSubtopicContent($subtopic_id);
        }
        else {
          $subtopic_ref_nodes = \Drupal::entityTypeManager()
            ->getStorage('node')->loadMultiple(array_keys($ids));

          $content_links = [];
          foreach ($subtopic_ref_nodes as $content_node) {
            /** @var \Drupal\node\NodeInterface $content_node */
            $content_links[] = $content_node->toLink()->toRenderable();
          }
        }

        // Add render array elements we can call from the node-topic--full template.
        $variables['content']['subtopics_list'][] = [
          '#theme' => 'subtopic_content_list',
          '#title' => $subtopic_title,
          '#title_link' => Link::createFromRoute(
            $subtopic_title,
            'entity.node.canonical',
            ['node' => $subtopic_id],
          ),
          '#content_links' => $content_links,
          '#read_more_link' => Link::createFromRoute(
            t('Read more'),
            'entity.node.canonical',
            ['node' => $subtopic_id],
          ),
          '#cache' => [
            'keys' => ['subtopic_' . $subtopic_id],
          ]
        ];
      }
    }
  }

  if ($node->bundle() === 'subtopic' && $view_mode === 'full') {
    $subtopics_content = \Drupal::service('dept_topics.subtopics')
      ->getSubtopicContent($node->id());

    $variables['content'][] = [
      '#theme' => 'item_list',
      '#list_type' => 'ul',
      '#items' => $subtopics_content,
    ];
  }
}

/**
 * Implements hook_theme().
 */
function dept_topics_theme($existing, $type, $theme, $path) {
  return [
    'subtopic_content_list' => [
      'variables' => [
        'title' => NULL,
        'title_link' => NULL,
        'content_links' => NULL,
        'read_more_link' => NULL,
      ],
    ],
  ];
}

/**
 * Function to return a list of keyed subtopic node ids/labels
 * that reference a specified topic node.
 *
 * @param \Drupal\node\NodeInterface $node
 *   The topic node.
 *
 * @return array
 *   Array of subtopic id/label values, e.g.: [1 => 'Angling'].
 */
function dept_topics_subtopics_queue_for_topic(NodeInterface $node) {
  $subtopic_queue = [];

  if ($node->bundle() === 'topic') {
    $topic_id = $node->id();

    // Find the entity ids and weights of the draggable view display.
    $query = \Drupal::database()->select('draggableviews_structure', 'ds')
      ->fields('ds', ['entity_id'])
      ->condition('view_name', 'content_stacks')
      ->condition('view_display', 'topic_subtopics')
      ->condition('args', '["' . $topic_id . '"]')
      ->orderBy('weight', 'ASC');

    $ids = $query->execute()->fetchAllAssoc('entity_id');
    $subtopic_nodes = \Drupal::entityTypeManager()
      ->getStorage('node')->loadMultiple(array_keys($ids));

    foreach ($subtopic_nodes as $node) {
      $subtopic_queue[$node->id()] = $node->label();
    }
  }

  return $subtopic_queue;
}
