<?php

/**
 * @file
 * Departmental topics/subtopics module for controlling display
 * of topics, subtopics and related content.
 */

use Drupal\Core\Cache\Cache;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Url;
use Drupal\node\Entity\Node;
use Drupal\node\NodeInterface;

/**
 * Implements hook_help().
 */
function dept_topics_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the antibot module.
    case 'help.page.dept_topics':
      $output = '';
      $output .= '<h3>' . t('Help') . '</h3>';
      $output .= '<p>' . t('For a comprehensive overview of the Topics system please see the readme file in the module root.') . '</p>';
      return $output;
  }
}

/**
 * Implements hook_moderation_sidebar_alter().
 */
function dept_topics_moderation_sidebar_alter(&$build, &$context) {
  if ($context instanceof NodeInterface &&
    in_array($context->bundle(), ['topic', 'subtopic'])) {

    $bundle_fields = \Drupal::getContainer()->get('entity_field.manager')->getFieldDefinitions('node', 'topic');
    $field_definition = $bundle_fields['field_topic_content'];
    $target_bundles = $field_definition->getSetting('handler_settings')['target_bundles'];

    foreach ($target_bundles as $bundle => $label) {
      $build['actions']['secondary']['add_' . $bundle] = [
        '#title' => 'Add ' . $label,
        '#type' => 'link',
        '#url' => Url::fromRoute('node.add', ['node_type' => $bundle], ['query' => ['topic' => $context->id()]]),
        '#attributes' => ['class' => ['moderation-sidebar-link', 'button']],
      ];
    }
  }
}

/**
 * Implements hook_cron().
 */
function dept_topics_cron() {
  $dbConn = \Drupal::database();

  // Fetch the parent node ID's of referenced topic content nodes that no
  // longer exist.
  $nids = $dbConn->query("
    SELECT nftc.entity_id FROM node__field_topic_content nftc
    LEFT JOIN node n
    ON nftc.field_topic_content_target_id = n.nid
    WHERE n.nid IS NULL;
  ")->fetchCol(0);

  if (empty($nids)) {
    return;
  }

  // Remove duplicate parent nids and create a list of node cache tags.
  $cids = array_map(function ($nid) {
    return 'values:node:' . $nid;
  }, array_unique($nids));
  // Remove any topic content reference field entries that point to deleted
  // nodes.
  $dbConn->query("
    DELETE nftc FROM node__field_topic_content nftc
    LEFT JOIN node n
    ON nftc.field_topic_content_target_id = n.nid
    WHERE n.nid IS NULL;
  ")->execute();

  $dbConn->query("
    DELETE nrftc FROM node_revision__field_topic_content nrftc
    LEFT JOIN node n
    ON nrftc.field_topic_content_target_id = n.nid
    WHERE n.nid IS NULL;
  ")->execute();

  // Check the caching of the entity info to update the topic content reference
  // field on the node edit form.
  $cache_entity = \Drupal::service('cache.entity');
  $cache_entity->deleteMultiple($cids);
}

/**
 * Implements hook_metatags_attachments_alter().
 */
function dept_topics_metatags_attachments_alter(array &$metatag_attachments) {
  $topicManager = \Drupal::service('topic.manager');
  $node = \Drupal::routeMatch()->getParameter('node');

  if ($node instanceof NodeInterface && in_array($node->bundle(), $topicManager->getTopicChildNodeTypes())) {
    $topicManager = \Drupal::service('topic.manager');
    $parents = $topicManager->getParentNodes($node->id());
    $tag_index = -1;

    if ($parents) {
      foreach ($metatag_attachments['#attached']['html_head'] as $index => $tag) {
        preg_match_all('/article_tag_(\d)/m', $tag[1], $matches, PREG_SET_ORDER, 0);

        if ($matches) {
          $tag_index = $matches[0][1];
        }
      }

      // Create a new article tag for each parent node.
      $tag_index++;
      foreach ($parents as $parent) {
        $metatag_attachments['#attached']['html_head'][] =
          [
            [
              '#tag' => 'meta',
              '#attributes' => [
                'property' => "article:tag",
                'content' => $parent->title
              ]
            ],
            'article_tag_' . $tag_index,
          ];
        $tag_index++;
      }
    }
  }
}

/**
 * Implements hook_form_ENTITY_form_alter().
 */
function dept_topics_form_node_form_alter(&$form, $form_state) {
  $form_object = $form_state->getFormObject();
  $topic_id = \Drupal::request()->query->get('topic');

  if (!empty($topic_id)) {
    // Select the site topic passed by the querystring parameter (coming from the moderation sidebar).
    if (array_key_exists('field_site_topics', $form)) {
      $form['field_site_topics']['widget']['#default_value'] = [$topic_id];
    }
  }

  $bundle = $form_object->getEntity()->bundle();

  if (\Drupal::service('topic.manager')->isValidTopicChild($bundle)) {
    $form['actions']['submit']['#submit'][] = 'dept_topics_process_topic_child_contents';
  }
}

/**
 * Implements hook_entity_delete().
 */
function dept_topics_entity_delete(EntityInterface $entity) {

  if ($entity instanceof NodeInterface) {
    /** @var \Drupal\dept_topics\TopicManager $topic_manager */
    $topic_manager = \Drupal::service('topic.manager');

    $bundle = $entity->bundle();
    $child_bundles = $topic_manager->getTopicChildNodeTypes();

    if (in_array($bundle, $child_bundles)) {
      $parents = $topic_manager->getParentNodes($entity->id());
      $node_manager = \Drupal::entityTypeManager()->getStorage('node');

      // Remove all topic content refernces for this node in topic/subtopic nodes.
      foreach ($parents as $parent => $data) {
        $topic_node = $node_manager->load($parent);
        $child_refs = $topic_node->get('field_topic_content');

        for ($i = 0; $i < $child_refs->count(); $i++) {
          // @phpstan-ignore-next-line
          if ($child_refs->get($i)->target_id == $entity->id()) {
            $child_refs->removeItem($i);
            $i--;
          }
        }
        $topic_node->save();
      }

    }
  }

}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function dept_topics_form_moderation_sidebar_quick_transition_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $entity = $form_state->get('entity');

  if ($entity instanceof NodeInterface) {
    if (\Drupal::service('topic.manager')->isValidTopicChild($entity->bundle())) {
      $form['#submit'][] = 'dept_topics_process_topic_child_contents';
    }
  }
}

/**
 * Submit callback for Moderation Sidebar Quick Transition form.
 */
function dept_topics_process_topic_child_contents($form, FormStateInterface $form_state) {
  $entity = $form_state->get('entity');
  $op = $form_state->getValue('op');
  $mod_state = $form_state->getValue('moderation_state');

  if (empty($entity)) {
    $nid = $form_state->getValue('nid');
    $entity = Node::load($nid);
  }

  // Update topic entries from Node form or Moderation sidebar.
  if ($op === 'Quick Publish' || $mod_state[0]['value'] === 'published' || $mod_state[0]['value'] === 'restore') {
    \Drupal::service('topic.manager')->updateChildDisplayOnTopics($entity);
  }
  elseif ($op === 'Archive' || $mod_state[0]['value'] === 'archived') {
    \Drupal::service('topic.manager')->removeChildDisplayFromTopics($entity);
  }

}

/**
 * Implements hook_node_presave().
 */
function dept_topics_node_presave(EntityInterface $node) {
  if ($node->bundle() === 'topic' || $node->bundle() === 'subtopic') {
    if ($node->isNew()) {
      // Ignore new as we don't have a node ID for the topic.
      return;
    }

    // Add or remove site topic tags to nodes that are added or removed from topic child contents.
    // @phpstan-ignore-next-line
    $original = array_column($node->original->get('field_topic_content')->getValue(), 'target_id');
    // @phpstan-ignore-next-line
    $updated = array_column($node->get('field_topic_content')->getValue(), 'target_id');

    if (count($original) > count($updated)) {
      $removed = array_diff($original, $updated);

      foreach ($removed as $nid) {
        $child_node = Node::load($nid);

        if (!empty($child_node)) {
          $child_topics = $child_node->get('field_site_topics');

          for ($i = 0; $i < $child_topics->count(); $i++) {
            // @phpstan-ignore-next-line
            if ($child_topics->get($i)->target_id == $node->id()) {
              $child_topics->removeItem($i);
              $i--;
            }
          }
          $child_node->save();
        }
      }
    }
    else {
      $added = array_diff($updated, $original);

      foreach ($added as $nid) {
        $child_node = Node::load($nid);
        if (!empty($child_node)) {
          $child_topic_tags = array_column($child_node->get('field_site_topics')->getValue(), 'target_id');

          if (!in_array($node->id(), $child_topic_tags)) {
            $child_node->get('field_site_topics')->appendItem([
              'target_id' => $node->id()
            ]);
            $child_node->save();
          }
        }
      }
    }

    // Clear the cache of the child content nodes (for cases when the thin banner etc. is updated).
    dept_topics_clear_child_caches($node);
  }
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function dept_topics_node_insert(NodeInterface $node) {
  // For new Topics add as a site topic to the child nodes.
  if ($node->bundle() === 'topic' || $node->bundle() === 'subtopic') {
    $child_contents = array_column($node->get('field_topic_content')->getValue(), 'target_id');

    foreach ($child_contents as $nid) {
      $child_node = Node::load($nid);
      $child_node->get('field_site_topics')->appendItem([
        'target_id' => $node->id()
      ]);
      $child_node->save();
    }

    // Clear the cache of the child content nodes (for cases when the thin banner etc. is added).
    dept_topics_clear_child_caches($node);
  }
}

/**
 * Clears the node cache for all the child nodes belonging to a node.
 *
 * @param \Drupal\node\NodeInterface $node
 *   A Topic/Subtopic node to clear child content caches.
 */
function dept_topics_clear_child_caches($node) {
  if ($node->bundle() === 'topic' || $node->bundle() === 'subtopic') {
    $child_cache_tags = array_column($node->get('field_topic_content')->getValue(), 'target_id');
    array_walk($child_cache_tags, function (&$value, $key) {
      $value = 'node:' . $value;
    });

    Cache::invalidateTags($child_cache_tags);
  }
}
