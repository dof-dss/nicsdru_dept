<?php

/**
 * @file
 * Search related overrides and preprocessing.
 */

use Drupal\block\Entity\Block;
use Drupal\Core\Url;
use Drupal\dept_core\Entity\Department;
use Drupal\facets\FacetInterface;
use Drupal\facets_summary\Entity\FacetsSummary;
use Drupal\views\ViewExecutable;

/**
 * Implements hook_form_FORM_ID_alter().
 */
function dept_search_form_search_api_form_alter(&$form) {
  $form['query']['#attributes']['placeholder'] = t('Search this site...');
}

/**
 * Implements hook_preprocess_facets_summary_item_list().
 */
function dept_search_preprocess_facets_summary_item_list(&$variables) {
  /* @var \Drupal\facets_summary\Entity\FacetsSummary $summary_facet */
  $summary_facet = \Drupal::entityTypeManager()->getStorage('facets_summary')->load($variables['facet_summary_id']);

  // Add the facet summary label as a facet description to allow us to
  // display that instead of the default facet (machine) name.
  if ($summary_facet instanceof FacetsSummary) {
    $facets = $summary_facet->getFacets();
    $summaries = [];
    foreach ($variables['items'] as $index => $item) {
      $label = $facets[$item['#title']['#facet']->id()]['label'];
      $variables['items'][$index]['#title']['#facet']->set('description', $label);

      $summaries[$label][] = $variables['items'][$index];
    }
    $variables['summaries'] = $summaries;
  }
}

/**
 * Implements hook_preprocess_facets_item_list().
 */
function dept_search_preprocess_facets_item_list(array &$variables) {

  // Early return if no items to process.
  if (empty($variables['items'])) {
    return;
  }

  /** @var \Drupal\facets\FacetInterface $facet */
  $facet = $variables['facet'];

  // Remove NIGov from press releases department facet.
  if ($facet->id() === 'pr_department') {
    foreach ($variables['items'] as $index => $item) {
      if ($item['#title']['#value'] === 'NIGov') {
        unset($variables['items'][$index]);
      }
    }

  }

  // Alter links so that they are not treated as self-referential links
  // and, to help prevent bots following the links, output a data-href
  // instead of href which JS will then convert to a href on page load.

  // Attach library which converts link data-href to href.
  $variables['#attached']['library'][] = 'dept_search/data_facet_href';

  foreach ($variables['items'] as $index => &$item) {

    /** @var \Drupal\Core\Url $url */
    $url = $variables['items'][$index]['#url'];
    $options = $url->getOptions();

    // Get the original href (URL) from the Url object.
    $original_href = $url->toString();

    // Set the 'data-href' attribute to the original href.
    $options['attributes']['data-facet-href'] = $original_href;

    // Set attribute to prevent link being treated as self-referential.
    $options['attributes']['data-self-ref'] = 'false';

    // Discard the query string from options if it's set.
    if (isset($options['query'])) {
      unset($options['query']);
    }

    // Rebuild the URL object to have href pointing at an anchor.
    $new_url = Url::fromUserInput('#main-content', $options);

    // Replace the facet link URL with the new one.
    $variables['items'][$index]['#url'] = $new_url;
  }
}

/**
 * Facet sorting callback, see dept_search_preprocess_facets_item_list().
 */
function dept_search_sort_group_facet_by_title($a, $b) {
  $a_title = $a['#title']['#value'] ?? '';
  $b_title = $b['#title']['#value'] ?? '';

  // Case-insensitive string comparison.
  return strcasecmp($a_title, $b_title);
}

/**
 * Implements hook_views_pre_view().
 */
function dept_search_views_pre_view(ViewExecutable $view, $display_id, array &$args) {

  $dept_manager = in_array($view->id(), [
    'news_search',
    'news_search',
    'publications_search',
    'site_search',
  ]) ? \Drupal::service('department.manager') : NULL;

  if ($view->id() === 'news_search' && $display_id === 'news_search') {
    /** @var Drupal\dept_core\Entity\Department $active_dept */
    $active_dept = $dept_manager->getCurrentDepartment();
    if (!$active_dept instanceof Department) {
      return;
    }

    // Don't pass in a value for NIGOV and let views show its 404 handler.
    // That site should use /press-releases to show its content.
    if ($active_dept->id() !== 'nigov') {
      $args[0] = $active_dept->id();
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function dept_search_form_alter(&$form, &$form_state, &$form_id) {
  // Don't display the sort/order by options on view exposed
  // search forms.
  switch ($form['#id']) {
    case 'views-exposed-form-consultations-search-consultations-search':
    case 'views-exposed-form-news-search-news-search':
    case 'views-exposed-form-news-search-press-release-search':
    case 'views-exposed-form-publications-search-publications-search':
      $form['sort_by']['#type'] = 'hidden';
      $form['sort_order']['#type'] = 'hidden';
      break;
  }
}

/**
 * Implements hook_views_data_alter().
 */
function dept_search_views_data_alter(array &$data) {
  $data['views']['search_sort_by'] = [
    'title' => t('Search sort links'),
    'help' => t('Provides links to sort search results by publication date and by relevance.'),
    'area' => [
      'id' => 'search_sort_by',
    ],
  ];
  return $data;
}

/**
 * Implements hook_preprocess_node().
 */
function dept_search_preprocess_node(array &$variables) {
  /** @var \Drupal\node\NodeInterface $node */
  $node = &$variables['node'];
  $view_mode = $variables['view_mode'];

  if ($view_mode === 'search_autocomplete') {
    $dept = \Drupal::service('department.manager')->getCurrentDepartment();

    // @phpstan-ignore-next-line
    if (empty($dept)) {
      return;
    }

    if ($dept->id() != 'nigov') {
      // Hide the domain source field.
      unset($variables['content']['field_domain_source']);
    }
  }
  if ($view_mode === 'search_result' && $node->bundle() === 'heritage_site') {
    // No summary field for search, so preprocess it from the body field
    // in here to render in the template.
    $body = $node->get('body')->getValue();
    $variables['content']['custom_summary'] = $body[0]['value'] ?? '';
  }
}
