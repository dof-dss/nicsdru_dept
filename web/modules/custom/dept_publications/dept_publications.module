<?php

/**
 * @file
 * Primary module hooks for Dept Publications module.
 */

use Drupal\Core\Access\AccessResultForbidden;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\node\NodeInterface;
use Drupal\views\Plugin\views\query\QueryPluginBase;
use Drupal\views\ViewExecutable;

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function dept_publications_form_node_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  /** @var \Drupal\Core\Entity\EntityFormInterface $form_object */
  $form_object = $form_state->getFormObject();
  /** @var \Drupal\node\NodeInterface $node */
  $node = $form_object->getEntity();

  // Toggle the display of the media fields depending on the required
  // attachment type.
  if ($node->bundle() === 'publication') {

    $current_user = \Drupal::currentUser();
    // Allow the selection of 'Public' or 'Secure' publications.
    if ($current_user->hasPermission('create secure publication') || in_array('administrator', $current_user->getRoles())) {
      $form['publication_attachment_type'] = [
        '#type' => 'radios',
        '#title' => t('Attachment(s) type'),
        '#options' => ['Public', 'Secure'],
        '#default_value' => !empty($node->get('field_publication_secure_files')->getValue()) ? '1' : '0',
        '#weight' => 0,
      ];

      $form['field_publication_files']['#states'] = [
        'invisible' => [
          ':input[name="publication_attachment_type"]' => ['value' => 1],
        ],
      ];
      $form['field_external_publication']['#states'] = [
        'invisible' => [
          ':input[name="publication_attachment_type"]' => ['value' => 1],
        ],
      ];

      $form['field_publication_secure_files']['#states'] = [
        'invisible' => [
          ':input[name="publication_attachment_type"]' => ['value' => 0],
        ],
        'required' => [
          ':input[name="publication_attachment_type"]' => ['value' => 1],
        ],
      ];

    }
    else {
      // Set the publication type to 'public' and prevent access to the secure publication widget.
      // If the user does not have the 'secure' permission or is non-admin.
      $form['publication_attachment_type'] = [
        '#type' => 'hidden',
        '#default_value' => '0',
        '#value' => '0',
      ];

      $form['field_publication_secure_files']['#access'] = FALSE;
    }

    $form['#validate'][] = 'dept_publications_validate_publication';
  }
}

/**
 * Form validation callback.
 */
function dept_publications_validate_publication(&$form, FormStateInterface $form_state) {
  $values = $form_state->getValues();

  // Validate public and secure file attachments.
  if ($values['publication_attachment_type'] == 0) {
    if (empty($values['field_publication_files']["selection"][0]) && empty($values['field_external_publication'][0]['uri'])) {
      $form_state->setErrorByName('field_publication_files', t('You must provide an attachment or external link'));
      $form_state->setErrorByName('field_external_publication', t('You must provide an attachment or external link'));
    }
  }
  else {
    if (empty($values['field_publication_secure_files']['selection'])) {
      $form_state->setErrorByName('field_publication_secure_files', t('You must provide a secure attachment'));
    }
  }
}

/**
 * Implements hook_entity_access().
 */
function dept_publications_entity_access(EntityInterface $entity, $operation, AccountInterface $account) {
  if ($account->isAnonymous() || $account->hasPermission('bypass node access')) {
    return;
  }

  if ($entity instanceof NodeInterface && $entity->getType() === 'publication') {
    // If there is a secure file field value assume this is a secure publication
    // and continue to perform access checks.
    if (empty($entity->get('field_publication_secure_files')->referencedEntities())) {
      return;
    }

    // This check is intended to override any broad/generic permissions
    // eg: 'view any unpublished content'.
    if ($entity->isPublished() === FALSE || $entity->isDefaultRevision() === FALSE) {
      $is_own_publication = $entity->getOwnerId() === $account->id();

      if (!$is_own_publication && !$account->hasPermission('view any unpublished secure publication')) {
        return AccessResultForbidden::forbidden();
      }
    }
  }
}

/**
 * Implements hook_entity_operation_alter().
 */
function dept_publications_entity_operation_alter(array &$operations, EntityInterface $entity) {
  if ($entity instanceof NodeInterface && $entity->getType() === 'publication') {
    // If there is a secure file field value assume this is a secure publication
    // and continue to perform access checks.
    if (empty($entity->get('field_publication_secure_files')->referencedEntities())) {
      return;
    }

    // This check is intended to override any broad/generic permissions
    // as well as the general NICS editorial workflow options. Eg:
    // prevents an non-admin and non-stats-* role from publishing
    // embargoed/secure publication content as this must be done
    // by a stats supervisor author or Administrator.
    if ($entity->isPublished() === FALSE) {
      if (!\Drupal::currentUser()->hasPermission('publish secure publication')) {
        return $operations;
      }
    }
  }
}

/**
 * Implements hook_file_download().
 */
function dept_publications_file_download($uri) {
  // Return -1 which is then later converted to AccessDeniedHttpException response.
  if (\Drupal::service('secure_publications_file_access')->canAccessSecureFileAttachment($uri) === FALSE) {
    return -1;
  }
}

/**
 * Implements hook_views_pre_execute().
 */
function dept_publications_views_pre_execute(ViewExecutable $view) {

}

/**
 * Implements hook_views_query_alter().
 */
function dept_publications_views_query_alter(ViewExecutable $view, QueryPluginBase $query) {
  $current_user = \Drupal::currentUser();

  if ($view->id() === 'content' && $view->current_display == 'page_1') {
    // @phpstan-ignore-next-line
    foreach ($query->where[1]['conditions'] as $index => $condition) {
      if ($condition['field'] === 'node__field_publication_secure_files.field_publication_secure_files_target_id') {
        // Unset this condition if stats supervisor/related permissions.
        if ($current_user->hasPermission('view any unpublished secure publication') || $current_user->hasPermission('view own unpublished secure publication')) {
          unset($query->where[1]['conditions'][$index]);

          // Set a notice message for top-level admins.
          if ($current_user->hasPermission('bypass node access')) {
            \Drupal::messenger()
              ->addWarning('Secure publications are included in this content list due to appropriate permissions for the current user. This message only shows for top-level admins.');
          }
        }
      }
    }
  }

  if ($view->id() === 'workflow_moderation') {
    // @phpstan-ignore-next-line
    foreach ($query->where[1]['conditions'] as $index => $condition) {
      if ($condition['field'] === 'node_field_data_node_field_revision__node__field_publication_secure_files.field_publication_secure_files_target_id') {
        // Unset this condition if stats supervisor/related permissions.
        if ($current_user->hasPermission('view any unpublished secure publication') || $current_user->hasPermission('view own unpublished secure publication')) {
          unset($query->where[1]['conditions'][$index]);

          // Set a notice message for top-level admins.
          if ($current_user->hasPermission('bypass node access')) {
            \Drupal::messenger()
              ->addWarning('Secure publications are included in this content list due to appropriate permissions for the current user. This message only shows for top-level admins.');
          }
        }
      }
    }
  }

  if ($view->id() === 'media_library') {
    // @phpstan-ignore-next-line
    foreach ($query->where[1]['conditions'] as $index => $condition) {
      if ($condition['field'] === 'media_field_data.bundle' && $condition['value'][0] === 'secure_file') {
        // Unset this condition if stats supervisor/related permissions.
        if ($current_user->hasPermission('view any unpublished secure publication') || $current_user->hasPermission('view own unpublished secure publication')) {
          unset($query->where[1]['conditions'][$index]);

          // Set a notice message for top-level admins.
          if ($current_user->hasPermission('administer media')) {
            \Drupal::messenger()
              ->addWarning('Files for secure publications are included in this content list due to appropriate permissions for the current user. This message only shows for top-level admins.');
          }
        }
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function dept_publications_form_views_exposed_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if (str_starts_with($form['#id'], 'views-exposed-form-media-library') &&
    \Drupal::currentUser()->hasPermission('view any unpublished secure publication')) {

    // Permit secure files in exposed filter. Dovetails with
    // dept_publications_views_query_alter above.
    $form['type']['#options']['secure_file'] = t('Secure file');
    ksort($form['type']['#options']);
  }
}

/**
 * Implements hook_preprocess_views_view_field().)
 */
function dept_publications_preprocess_views_view_field(&$variables) {
  $view = $variables['view'];

  // If the content type is publication with secure attachments, update the 'type' text if it is unpublished.
  if ($view->storage->id() === 'workflow_moderation' || $view->storage->id() === 'content') {
    if ($variables['field']->field === 'type' && $variables['output'] == 'Publication') {
      $entity = $variables["row"]->_entity;
      if ($entity->hasField('field_publication_secure_files') && !$entity->get('field_publication_secure_files')->isEmpty()) {
        if ($entity->get('moderation_state')->getString() !== 'published') {
          $variables['output'] = t('Publication (secure)');
        }
      }
    }
  }
}
