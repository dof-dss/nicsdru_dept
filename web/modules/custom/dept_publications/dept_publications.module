<?php

/**
 * @file
 * Primary module hooks for Dept Publications module.
 */

use Drupal\Core\Access\AccessResultForbidden;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\node\NodeInterface;

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function dept_publications_form_node_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  /** @var \Drupal\Core\Entity\EntityFormInterface $form_object */
  $form_object = $form_state->getFormObject();
  /** @var \Drupal\node\NodeInterface $node */
  $node = $form_object->getEntity();

  // Toggle the display of the media fields depending on the required
  // attachment type.
  if ($node->bundle() === 'publication') {
    $form['publication_attachment_type'] = [
      '#type' => 'radios',
      '#title' => t('Attachment(s) type'),
      '#options' => ['Public', 'Secure'],
      '#default_value' => '0',
      '#weight' => 0,
    ];

    $form['field_publication_files']['#states'] = [
      'invisible' => [
        ':input[name="publication_attachment_type"]' => ['value' => 1],
      ],
    ];

    $form['field_external_publication']['#states'] = [
      'invisible' => [
        ':input[name="publication_attachment_type"]' => ['value' => 1],
      ],
    ];

    $form['field_publication_secure_files']['#states'] = [
      'invisible' => [
        ':input[name="publication_attachment_type"]' => ['value' => 0],
      ],
    ];

    if (!empty($node->get('field_publication_secure_files')->getValue())) {
      $form['publication_attachment_type']['#default_value'] = 1;
    }

    $form['#validate'][] = 'dept_publications_validate_publication';
  }
}

/**
 * Form validation callback.
 */
function dept_publications_validate_publication(&$form, FormStateInterface $form_state) {
  $values = $form_state->getValues();

  // Validate public and secure file attachments.
  if ($values['publication_attachment_type'] == 0) {
    if (empty($values['field_publication_files']["selection"][0]) && empty($values['field_external_publication'][0]['uri'])) {
      $form_state->setErrorByName('field_publication_files', t('You must provide an attachment or external link'));
      $form_state->setErrorByName('field_external_publication', t('You must provide an attachment or external link'));
    }
  }
  else {
    if (empty($values['field_publication_secure_files'])) {
      $form_state->setErrorByName('field_publication_secure_files', t('You must provide a secure attachment'));
    }
  }

  // Validate that external publications point to a departmental domain.
  $department_manager = \Drupal::service('department.manager');
  $departments = $department_manager->getAllDepartments();

  // Build a list of allowed urls.
  $allowed_domains = [];
  foreach ($departments as $department) {
    $allowed_domains[] = $department->hostname();
  }

  if (!empty($values['field_external_publication'][0]["uri"])) {
    $regex = '/https?:\/\/(?:www.)?(' . rtrim(implode('|', $allowed_domains), '|') . ')\/publications\/.+/m';

    if (preg_match($regex, $values['field_external_publication'][0]['uri']) !== 1) {
      $form_state->setErrorByName('field_external_publication', t('External publications links can only be to departmental websites e.g http://www.health-ni.gov.uk/publications/alternative-languages-and-accessible-formats'));
    }
  }

}

/**
 * Implements hook_entity_access().
 */
function dept_publications_entity_access(EntityInterface $entity, $operation, AccountInterface $account) {
  if ($account->isAnonymous() || $account->hasPermission('bypass node access')) {
    return;
  }

  if ($entity instanceof NodeInterface && $entity->getType() === 'publication') {
    // If there is a secure file field value assume this is a secure publication
    // and continue to perform access checks.
    if (empty($entity->get('field_publication_secure_files')->referencedEntities())) {
      return;
    }

    // This check is intended to override any broad/generic permissions
    // eg: 'view any unpublished content'.
    if ($entity->isPublished() === FALSE || $entity->isDefaultRevision() === FALSE) {
      $is_own_publication = $entity->getOwnerId() === $account->id();

      if (!$is_own_publication && !$account->hasPermission('view any unpublished secure publication')) {
        return AccessResultForbidden::forbidden();
      }
    }
  }
}
