<?php

/**
 * @file
 * Departmental Node module for Departmental sites.
 */

use Drupal\dept_core\Entity\Department;
use Drupal\dept_node\Entity\Node;
use Drupal\dept_node\Form\NodeForm;
use Drupal\node\NodeInterface;
use Drupal\views\Plugin\views\query\QueryPluginBase;
use Drupal\views\ViewExecutable;

/**
 * Implements hook_form_ENTITY_form_alter().
 */
function dept_node_form_node_form_alter(&$form, $form_state) {
  $docs_field_ids = [
    'field_attachment',
    'field_publication_files',
    'field_publication_secure_files',
  ];

  if (!empty(array_intersect(array_keys($form), $docs_field_ids))) {
    $form['#attached']['library'][] = 'nicsdru_origins_theme/media_library_styles';
  }
}

/**
 * Implements hook_views_pre_render().
 */
function dept_node_views_pre_render(ViewExecutable $view) {
  // Append the active site name to a few fields/titles for publications RSS.
  if ($view->id() === 'press_releases') {
    $site_name = \Drupal::config('system.site')->get('name');
    $title = t('Latest press releases from ') . $site_name;
    $view->setTitle($title);

    if (\Drupal::routeMatch()->getRouteName() === 'entity.view.preview_form') {
      \Drupal::messenger()
        ->addWarning('NB: Title altered in dept_node_views_pre_render()');
    }
  }
}

/**
 * Implements hook_views_query_alter().
 *
 * For topic entity queues, it alters the relationship condition to
 * restrict the query to the correct entity queue id, based on repurposing
 * the department name attribute as the numerical id would require a
 * separate fixed lookup condition or function.
 */
function dept_node_views_query_alter(ViewExecutable $view, QueryPluginBase $query) {
  $dept_manager = \Drupal::service('department.manager');
  /** @var \Drupal\dept_core\Entity\Department $dept */
  $dept = $dept_manager->getCurrentDepartment();

  if ($dept instanceof Department === FALSE) {
    return;
  }

  if ($view->id() === 'topic_queue') {
    $is_prod_env = getenv('PLATFORM_BRANCH') === 'main';
    $dept_url_hostname_parts = explode('.', parse_url($dept->url($is_prod_env), PHP_URL_HOST));
    if ($dept_url_hostname_parts[0] === 'www') {
      $dept_url_hostname_parts = array_shift($dept_url_hostname_parts);
    }

    $topic_queue_id = 'topics_dept_' . str_replace('-ni', '', $dept_url_hostname_parts[0]);

    // Topic queue views is based on db query, so type hint the SQL query class.
    /** @var \Drupal\views\Plugin\views\query\Sql $query */
    $table = $query->getTableInfo('entity_subqueue__items');
    $table['join']->extra[0]['value'][0] = $topic_queue_id;
  }
}

/**
 * Implements hook_theme().
 */
function dept_node_theme($existing, $type, $theme, $path) {
  return [
    'topics_subtopics_list' => [
      'variables' => [
        'title' => NULL,
        'items' => NULL,
        'render_links' => NULL,
        'include_subtopics' => NULL,
      ],
    ],
  ];
}

/**
 * Implements hook_preprocess_node().
 */
function dept_node_preprocess_node(array &$variables) {
  /** @var \Drupal\node\NodeInterface $node */
  $node = &$variables['node'];
  $view_mode = $variables['view_mode'];
  $routename = \Drupal::routeMatch()->getRouteName();

  if (!$node instanceof NodeInterface) {
    return;
  }

  // Add the topic banner to the output, if relevant.
  dept_node_topic_banner($variables);

  if ($view_mode === 'search_metadata' && $node->bundle() === 'news') {
    // Add the department metadata on the press-releases listing.
    if ($routename != 'view.news_search.press_release_search') {
      return;
    }

    // Rewrite any existing relative URLs to content to their absolute
    // departmental URL paths, using active config split profile values.
    if (!preg_match('|^http|', $variables['url'])) {
      $variables['url'] = \Drupal::service('rel2abs_url')
        ->handleUrl($variables['url'], $node);
    }
  }

  if ($view_mode === 'search_metadata' && $node->bundle() === 'consultation') {
    $consultation_dates = $node->get('field_consultation_dates')->getValue();
    // Set the consultation status to open/closed based on its date values.
    $now = \Drupal::service('datetime.time')->getCurrentTime();
    $consultation_end = strtotime($consultation_dates[0]['end_value']);
    $consultation_ended = ($consultation_end - $now) <= 0;

    // Preprocess variable to examine consultation end date relative to
    // the current request timestamp and determine whether it is open
    // or whether it has already closed.
    $variables['content']['consultation_status'] = [
      '#type' => 'html_tag',
      '#tag' => 'span',
      '#attributes' => [
        'class' => [
          'metaListItem',
          'card__meta-type',
        ],
      ],
      '#value' => $consultation_ended ? t('Closed') : t('Open'),
      '#weight' => count($variables['content']) + 1,
    ];
  }
}

/**
 * Adds the required preprocess variables to the page
 * if there is a parent topic with a landing page that has
 * a banner image associated with it. If these values are
 * detected at the template, it should render the image
 * media with the overlay file on top to create a blended
 * banner image that can appear above the title.
 */
function dept_node_topic_banner(array &$variables) {
  /** @var \Drupal\node\NodeInterface $node */
  $node = &$variables['node'];
  $view_mode = $variables['view_mode'];

  // Only show the banner on full view mode.
  if ($view_mode != 'full') {
    return;
  }

  // Assume topic nodes present this banner as part of $content.
  if ($node->bundle() === 'topic') {
    return;
  }

  // Look up referenced topics.
  $site_topics = NULL;
  foreach (['field_site_topics', 'field_parent_topic'] as $topic_field_name) {
    if ($node->hasField($topic_field_name)) {
      $site_topics = $node->get($topic_field_name)->referencedEntities();
    }
  }

  if (empty($site_topics)) {
    return;
  }

  /** @var \Drupal\node\NodeInterface $topic_node */
  $topic_node = $site_topics[0];

  // Is there a landing page with the same topic reference with a banner?
  $lp_query_ids = \Drupal::entityQuery('node')
    ->condition('type', 'landing_page')
    ->condition('status', 1)
    ->condition('field_site_topics', $topic_node->id())
    ->range(0, 1)
    ->execute();

  $landing_page_node = \Drupal::entityTypeManager()
    ->getStorage('node')
    ->loadMultiple($lp_query_ids);
  $landing_page_node = reset($landing_page_node);

  if (empty($landing_page_node)) {
    return;
  }

  $banner_media = reset($landing_page_node
    ->get('field_banner_image')
    ->referencedEntities()
  );

  if (empty($banner_media)) {
    return;
  }

  $banner_render = \Drupal::entityTypeManager()
    ->getViewBuilder('media')
    ->view($banner_media, 'banner_thin');

  // Put the media render array into the preprocess vars to blend
  // with the overlay image at the template layer.
  $variables['banner_image'] = $banner_render;
  $variables['banner_image']['#weight'] = -100;
}
