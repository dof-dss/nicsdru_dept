<?php

/**
 * @file
 * Departmental Node module for Departmental sites.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Messenger\MessengerInterface;
use Drupal\Core\Url;
use Drupal\dept_node\Entity\Node;
use Drupal\dept_node\Form\DeptNodeForm;
use Drupal\dept_node\FormatHelper;
use Drupal\node\NodeInterface;
use Drupal\views\ViewExecutable;

/**
 * Implements hook_form_ENTITY_form_alter().
 */
function dept_node_form_node_form_alter(&$form, $form_state) {

  // Add handler to process nodes that should have 'nigov' entries.
  if (in_array($form_state->getFormObject()->getEntity()->bundle(), [
    'consultation',
    'publication',
    'news'
  ])) {
    foreach (array_keys($form['actions']) as $action) {
      if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
        array_unshift($form['actions'][$action]['#submit'], 'dept_node_assign_domain_defaults');
      }
    }
  }

  $docs_field_ids = [
    'field_attachment',
    'field_publication_files',
    'field_publication_secure_files',
  ];

  if (!empty(array_intersect(array_keys($form), $docs_field_ids))) {
    $form['#attached']['library'][] = 'nicsdru_origins_theme/media_library_styles';
  }

  // Set Domain Source as required as we need this for features such as LinkIt
  // to function properly.
  $form['field_domain_source']['widget']['#required'] = TRUE;

  // Set the Domain source entry if not already provided.
  if (empty($form['field_domain_source']['widget']['#default_value'])) {
    $domain_access_ids = $form['field_domain_access']['widget']['#default_value'];

    if (count($domain_access_ids) > 1) {
      // Exclude NIGov as a domain entry as that site should not be publishing
      // content.
      $domain_access_ids = array_values(array_filter(array_map(function ($val) {
        if ($val !== 'nigov') {
          return $val;
        }
      }, $domain_access_ids)));
    }

    $form['field_domain_source']['widget']['#default_value'][] = $domain_access_ids[0];
  }
}

/**
 * Implements hook_views_pre_render().
 */
function dept_node_views_pre_render(ViewExecutable $view) {
  // Append the active site name to a few fields/titles for publications RSS.
  if ($view->id() === 'press_releases') {
    $site_name = \Drupal::config('system.site')->get('name');
    $title = t('Latest press releases from ') . $site_name;
    $view->setTitle($title);

    if (\Drupal::routeMatch()->getRouteName() === 'entity.view.preview_form') {
      \Drupal::messenger()
        ->addWarning('NB: Title altered in dept_node_views_pre_render()');
    }
  }
}

/**
 * Implements hook_theme().
 */
function dept_node_theme($existing, $type, $theme, $path) {
  return [
    'topics_subtopics_list' => [
      'variables' => [
        'title' => NULL,
        'items' => NULL,
        'links' => NULL,
      ],
    ],
  ];
}

/**
 * Implements hook_preprocess_node().
 */
function dept_node_preprocess_node(array &$variables) {
  /** @var \Drupal\node\NodeInterface $node */
  $node = &$variables['node'];
  $view_mode = $variables['view_mode'];
  $routename = \Drupal::routeMatch()->getRouteName();
  $host = \Drupal::request()->getSchemeAndHttpHost();

  // Transform node URL's from absolute to relative..
  if ($node instanceof NodeInterface) {
    $variables['url'] = str_starts_with($variables['url'], $host) ? substr($variables['url'], strlen($host)) : $variables['url'];
  }

  if (!$node instanceof NodeInterface || $view_mode === 'search_autocomplete') {
    // Exit if it's not a node or the view mode is search_autocomplete see
    // dept_search.module preprocess_node for handling of autocomplete results.
    return;
  }

  // Add the topic banner to the output, if relevant.
  dept_node_topic_banner($variables);

  if (str_starts_with($view_mode, 'search_') && $node->bundle() === 'news') {
    // Add the department metadata on the press-releases listing.
    if ($routename != 'view.news_search.press_release_search') {
      return;
    }

    // Rewrite any existing relative URLs to content to their absolute
    // departmental URL paths, using active config split profile values.
    if (!preg_match('|^http|', $variables['url'])) {
      $variables['url'] = \Drupal::service('rel2abs_url')
        ->handleUrl($variables['url'], $node);
    }
  }

  if (str_starts_with($view_mode, 'search_') && $node->bundle() === 'consultation') {
    $consultation_dates = $node->get('field_consultation_dates')->getValue();
    // Set the consultation status to open/closed based on its date values.
    $now = \Drupal::service('datetime.time')->getCurrentTime();
    $consultation_end = strtotime($consultation_dates[0]['end_value']);
    $consultation_ended = ($consultation_end - $now) <= 0;

    // Preprocess variable to examine consultation end date relative to
    // the current request timestamp and determine whether it is open
    // or whether it has already closed.
    $variables['content']['consultation_status'] = [
      '#type' => 'html_tag',
      '#tag' => 'span',
      '#attributes' => [
        'class' => [
          'metaListItem',
          'card__meta-type',
        ],
      ],
      '#value' => $consultation_ended ? t('Closed') : t('Open'),
      '#weight' => count($variables['content']) + 1,
    ];
  }

  if ($node->bundle() === 'heritage_site') {
    $historic_map = $node->get('field_historic_map_viewer_link')->getValue();
    $nismr = $node->get('field_nismr_link')->getValue();

    if (!empty($historic_map[0]['uri'])) {
      $variables['content']['field_historic_map_viewer_link'][0]['#title'] = t('View on the Historic Environment Map Viewer');
    }
    if (!empty($nismr[0]['uri'])) {
      $variables['content']['field_nismr_link'][0]['#title'] = t('View details on the NI Sites & Monuments Record (NISMR)');
    }
  }
}

/**
 * Adds the required preprocess variables to the page
 * if there is a parent topic with a landing page that has
 * a banner image associated with it. If these values are
 * detected at the template, it should render the image
 * media with the overlay file on top to create a blended
 * banner image that can appear above the title.
 */
function dept_node_topic_banner(array &$variables) {
  /** @var \Drupal\node\NodeInterface $node */
  $node = &$variables['node'];

  // Only show the banner on full view mode.
  if ($variables['view_mode'] != 'full') {
    return;
  }

  $topic_manager = \Drupal::service('topic.manager');

  // Only display banners for bundles that belong to the topics' system.
  if (!array_key_exists($node->bundle(), $topic_manager->getTopicChildNodeTypes())) {
    return;
  }

  // If current node has a banner, return as it'll be displayed in the view mode or layout.
  if ($node->hasField('field_banner_image') && !is_null($node->get('field_banner_image'))) {
    return;
  }

  // Fetch parents, if parents have banner use it.
  $parent_nids = array_keys($topic_manager->getParentNodes($node->id()));
  $banner_link = '';

  $parent_nodes = \Drupal::entityTypeManager()
    ->getStorage('node')
    ->loadMultiple($parent_nids);

  // Iterate each parent checking for a thin banner image.
  foreach ($parent_nodes as $parent_node) {
    if ($parent_node->hasField('field_banner_image_thin') && !$parent_node->get('field_banner_image_thin')->isEmpty()) {
      $banner_media = $parent_node
        ->get('field_banner_image_thin')
        ->referencedEntities();

      $banner_link = Url::fromRoute('entity.node.canonical', ['node' => $parent_node->id()]);
    }
  }

  if (empty($banner_media)) {
    return;
  }

  $variables['banner_link'] = $banner_link->toString();

  $banner_render = \Drupal::entityTypeManager()
    ->getViewBuilder('media')
    ->view(reset($banner_media), 'banner_thin');

  // Put the media render array into the preprocess vars to blend
  // with the overlay image at the template layer.
  $variables['banner_image'] = $banner_render;
  $variables['banner_image']['#weight'] = -100;
}

/**
 * Updates the domain_access value to include the nigov domain if certain
 * conditions are met.
 */
function dept_node_assign_domain_defaults(array $form, FormStateInterface $form_state) {

  $domain_access = $form_state->getValue('field_domain_access');

  // @phpstan-ignore-next-line
  if ($form_state->getFormObject()->getEntity()->bundle() === 'news') {
    // If News is not a press release, remove any existing 'nigov' entry.
    if ($form_state->getValue('field_news_type')[0]['value'] !== 'pressrelease') {
      $form_state->setValue('field_domain_access', array_filter($domain_access, function ($domain) {
        return $domain['target_id'] !== 'nigov';
      }));
      return;
    }
  }

  $domain_access[] = ['target_id' => 'nigov'];

  // Remove any duplicate domain entries.
  array_unique($domain_access, SORT_REGULAR);

  $form_state->setValue('field_domain_access', $domain_access);
}

/**
 * Implements hook_preprocess_page().
 */
function dept_node_preprocess_page(&$variables) {
  if (\Drupal::service('router.admin_context')->isAdminRoute()) {
    return;
  }

  // Apply link manager library to all non-admin pages.
  $variables['#attached']['library'][] = 'dept_node/link_manager';
}

/**
 * Implements hook_entity_type_alter().
 */
function dept_node_entity_type_alter(&$entity_types) {

  if (isset($entity_types['node'])) {
    foreach (['default', 'edit'] as $operation) {
      $entity_types['node']->setFormClass($operation, DeptNodeForm::class);
    }
  }
}

/**
 * Implements hook_pathauto_alias_alter().
 */
function dept_node_pathauto_alias_alter(&$alias, array &$context) {
  $dbConn = \Drupal::database();

  $results = $dbConn->query("SELECT pa.path, pa.alias FROM {path_alias} pa WHERE pa.alias = :alias", [':alias' => $alias])->fetchCol();

  // If we have an existing alias, append the department id and notify the user.
  if ($results && $results[0] !== $context['source']) {
    $domain = \Drupal::service('domain.negotiator')->getActiveDomain()->id();
    $alias .= '-' . $domain;

    $update_link = '<a class="use-ajax" data-dialog-type="modal" href="' . Url::fromRoute('dept_node.update_path_alias', ['nid' => substr($context['source'], strrpos($context['source'], '/') + 1)])->toString() . '">edit the alias.</a>';

    if (PHP_SAPI != 'cli') {
      \Drupal::messenger()->addMessage("A url alias for this content is already in use so additional text has been appended to the end. You can $update_link", MessengerInterface::TYPE_WARNING);
    }
  }
}

function dept_node_entity_presave(EntityInterface $entity) {
  if ($entity instanceof NodeInterface && $entity->hasField('field_site_topics')) {
    $site_topics = $entity->get('field_site_topics')->getValue();

    // Site topics field dumps all topics/subtopics into the field value, here
    // we filter out only those with a target_id.
    $site_topics = array_filter($site_topics, function($value, $key) {
      return $value['target_id'] !== 0;
    }, ARRAY_FILTER_USE_BOTH);

    $entity->set('field_site_topics',$site_topics);
  }
}
