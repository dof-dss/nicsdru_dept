<?php

/**
 * @file
 * Departmental Node module for Departmental sites.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Messenger\MessengerInterface;
use Drupal\Core\Url;
use Drupal\dept_node\Entity\Node;
use Drupal\dept_node\Form\DeptNodeForm;
use Drupal\dept_node\FormatHelper;
use Drupal\node\Entity\NodeType;
use Drupal\node\NodeInterface;
use Drupal\views\ViewExecutable;
use Symfony\Component\HttpFoundation\RedirectResponse;

/**
 * Implements hook_form_FORM_ID_alter().
 */
function dept_node_form_views_exposed_form_alter(&$form, FormStateInterface $form_state) {
  // A shim to fix the oddity where a non-selection makes form API
  // grumble about an incorrect value being selected.
  if (!empty($form['dept'])) {
    // Shim-shim for some core view filters, unclear why this
    // is needed but media views filters do not.
    $empty_val_routes = [
      'system.admin_content',
      'entity.user.collection',
    ];
    if (in_array(\Drupal::routeMatch()->getRouteName(), $empty_val_routes)) {
      $form['dept']['#empty_value'] = 'All';
    }

    // Hide the dept filter if the user doesn't have permission to
    // view multiple domains.
    if (!\Drupal::currentUser()->hasPermission('view domain list')) {
      $dept = \Drupal::service('department.manager')->getCurrentDepartment();
      $form['dept']['#type'] = 'hidden';
      $form['dept']['#default_value'] = $dept->id();
    }
  }
}

/**
 * Implements hook_form_ENTITY_form_alter().
 */
function dept_node_form_node_form_alter(&$form, $form_state) {
  // Add handler to process nodes that should have 'nigov' entries.
  if (in_array($form_state->getFormObject()->getEntity()->bundle(), [
    'consultation',
    'publication',
    'news'
  ])) {
    foreach (array_keys($form['actions']) as $action) {
      if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
        array_unshift($form['actions'][$action]['#submit'], 'dept_node_assign_domain_defaults');
      }
    }
  }

  $docs_field_ids = [
    'field_attachment',
    'field_publication_files',
    'field_publication_secure_files',
  ];

  if (!empty(array_intersect(array_keys($form), $docs_field_ids))) {
    $form['#attached']['library'][] = 'nicsdru_origins_theme/media_library_styles';
  }

  // Set Domain Source as required as we need this for features such as LinkIt
  // to function properly.
  $form['field_domain_source']['widget']['#required'] = TRUE;

  if ($form['#form_id'] === 'node_subtopic_child_order_form') {
    return;
  }

  // Set the Domain source entry if not already provided.
  if (array_key_exists('field_domain_access', $form) && empty($form['field_domain_source']['widget']['#default_value'])) {
    $domain_access_ids = $form['field_domain_access']['widget']['#default_value'];

    // If we don't have any ids, use the value added by dept_core_set_entity_domain_defaults().
    if (empty($domain_access_ids)) {
      $domain_access_ids[] = $form['field_domain_access']['widget']['#value'];
    }

    if (count($domain_access_ids) > 1) {
      // Exclude NIGov as a domain entry as that site should not be publishing
      // content.
      $domain_access_ids = array_values(array_filter(array_map(function ($val) {
        if ($val !== 'nigov') {
          return $val;
        }
      }, $domain_access_ids)));
    }

    if (!empty($domain_access_ids[0])) {
      $form['field_domain_source']['widget']['#default_value'][] = $domain_access_ids[0];
    }
    else {
      \Drupal::logger('dept_node')->error("Domain access ID's not found for entity: @entity", ['@entity' => $form_state->getFormObject()->getEntity()->getEntityTypeId()]);
    }
  }
}

/**
 * Implements hook_views_pre_render().
 */
function dept_node_views_pre_render(ViewExecutable $view) {
  // Append the active site name to a few fields/titles for publications RSS.
  if ($view->id() === 'press_releases') {
    $site_name = \Drupal::config('system.site')->get('name');
    $title = t('Latest press releases from ') . $site_name;
    $view->setTitle($title);

    if (\Drupal::routeMatch()->getRouteName() === 'entity.view.preview_form') {
      \Drupal::messenger()
        ->addWarning('NB: Title altered in dept_node_views_pre_render()');
    }
  }
}

/**
 * Implements hook_theme().
 */
function dept_node_theme($existing, $type, $theme, $path) {
  return [
    'topics_subtopics_list' => [
      'variables' => [
        'title' => NULL,
        'items' => NULL,
        'links' => NULL,
      ],
    ],
  ];
}

/**
 * Implements hook_preprocess_node().
 */
function dept_node_preprocess_node(array &$variables) {
  /** @var \Drupal\node\NodeInterface $node */
  $node = &$variables['node'];
  $view_mode = $variables['view_mode'];

  // Transform node URL's from absolute to relative based on domain source value.
  if ($node instanceof NodeInterface) {
    $domain_source_value = $node->get('field_domain_source')->referencedEntities();
    // Only one value for canonical domain source.
    $source_domain = (is_array($domain_source_value)) ? $domain_source_value[0] : NULL;
    if (!empty($source_domain)) {
      $domain_path = rtrim($source_domain->getPath(), '/');

      if (!empty($variables['url'])) {
        $variables['url'] = $domain_path . $variables['url'];
      }
    }
  }

  if (!$node instanceof NodeInterface || $view_mode === 'search_autocomplete') {
    // Exit if it's not a node or the view mode is search_autocomplete see
    // dept_search.module preprocess_node for handling of autocomplete results.
    return;
  }

  if (str_starts_with($view_mode, 'search_') && $node->bundle() === 'news') {
    // Rewrite any existing relative URLs to content to their absolute
    // departmental URL paths, using active config split profile values.
    if (!preg_match('|^http|', $variables['url'])) {
      $variables['url'] = \Drupal::service('rel2abs_url')
        ->handleUrl($variables['url'], $node);
    }
  }

  if (str_starts_with($view_mode, 'search_') && $node->bundle() === 'consultation') {
    $consultation_dates = $node->get('field_consultation_dates')->getValue();
    // Set the consultation status to open/closed/pending based on its date values.
    $now = \Drupal::service('datetime.time')->getCurrentTime();
    $consultation_start = strtotime($consultation_dates[0]['value']);
    $consultation_end = strtotime($consultation_dates[0]['end_value']);
    $consultation_started = ($consultation_start - $now) <= 0;
    $consultation_ended = ($consultation_end - $now) <= 0;

    if ($consultation_started && $consultation_ended) {
      $consultation_status = t('Closed');
    }
    elseif (!$consultation_started) {
      $consultation_status = t('Pending');
    }
    else {
      $consultation_status = t('Open');
    }

    // Preprocess variable to examine consultation end date relative to
    // the current request timestamp and determine whether it is open
    // or whether it has already closed.
    $variables['content']['consultation_status'] = [
      '#type' => 'html_tag',
      '#tag' => 'span',
      '#attributes' => [
        'class' => [
          'metaListItem',
          'card__meta-type',
        ],
      ],
      '#value' => $consultation_status,
      '#weight' => count($variables['content']) + 1,
    ];
  }

  if ($node->bundle() === 'heritage_site') {
    $historic_map = $node->get('field_historic_map_viewer_link')->getValue();
    $nismr = $node->get('field_nismr_link')->getValue();

    if (!empty($historic_map[0]['uri'])) {
      $variables['content']['field_historic_map_viewer_link'][0]['#title'] = t('View on the Historic Environment Map Viewer');
    }
    if (!empty($nismr[0]['uri'])) {
      $variables['content']['field_nismr_link'][0]['#title'] = t('View details on the NI Sites & Monuments Record (NISMR)');
    }
  }
}

/**
 * Implements hook_pathauto_alias_alter().
 */
function dept_node_pathauto_alias_alter(&$alias, array &$context) {
  $dbConn = \Drupal::database();

  $results = $dbConn->query("SELECT pa.path, pa.alias FROM {path_alias} pa WHERE pa.alias = :alias", [':alias' => $alias])->fetchCol();

  // If we have an existing alias, append the department id and notify the user.
  if ($results && $results[0] !== $context['source']) {
    $domain = \Drupal::service('domain.negotiator')->getActiveDomain()->id();
    $alias .= '-' . $domain;

    $update_link = '<a class="use-ajax" data-dialog-type="modal" href="' . Url::fromRoute('dept_node.update_path_alias', ['nid' => substr($context['source'], strrpos($context['source'], '/') + 1)])->toString() . '">edit the alias.</a>';

    if (PHP_SAPI != 'cli') {
      \Drupal::messenger()->addMessage("A url alias for this content is already in use so additional text has been appended to the end. You can $update_link", MessengerInterface::TYPE_WARNING);
    }
  }
}

/**
 * Updates the domain_access value to include the nigov domain if certain
 * conditions are met.
 */
function dept_node_assign_domain_defaults(array $form, FormStateInterface $form_state) {

  $domain_access = $form_state->getValue('field_domain_access');

  // @phpstan-ignore-next-line
  if ($form_state->getFormObject()->getEntity()->bundle() === 'news') {
    // If News is not a press release, remove any existing 'nigov' entry.
    if ($form_state->getValue('field_news_type')[0]['value'] !== 'pressrelease') {
      $form_state->setValue('field_domain_access', array_filter($domain_access, function ($domain) {
        return $domain['target_id'] !== 'nigov';
      }));
      return;
    }
  }

  $domain_access[] = ['target_id' => 'nigov'];

  // Remove any duplicate domain entries.
  array_unique($domain_access, SORT_REGULAR);

  $form_state->setValue('field_domain_access', $domain_access);
}

/**
 * Implements hook_preprocess_page().
 */
function dept_node_preprocess_page(&$variables) {

  // Redirect requests to Link node URL's to the Link's URL field.
  if (!empty($variables['node']) && $variables['node']->bundle() == 'link') {
    /** @var \Drupal\node\Entity\Node $node */
    $node = $variables['node'];
    $uri = $node->get('field_link_url')->getString();

    if (!empty($uri)) {
      $redirect = new RedirectResponse(Url::fromUri($uri)->toString());
      $redirect->send();
    }
  }

  if (\Drupal::service('router.admin_context')->isAdminRoute()) {
    return;
  }

  // Apply link manager library to all non-admin pages.
  $variables['#attached']['library'][] = 'dept_node/link_manager';
}

/**
 * Implements hook_entity_type_build().
 */
function dept_node_entity_type_build(array &$entity_types) {
  $entity_types['node']->setHandlerClass('access', '\Drupal\dept_node\DeptNodeAccessControlHandler');
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function dept_node_form_node_type_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  /** @var \Drupal\Core\Entity\EntityFormInterface $form_object */
  $form_object = $form_state->getFormObject();

  /** @var \Drupal\node\NodeInterface $node */
  $node = $form_object->getEntity();
  if (empty($node->id())) {
    return;
  }

  $node_type = NodeType::load($node->id());
  $departments = \Drupal::service('department.manager')->getAllDepartments();
  $department_options = [];

  foreach ($departments as $department) {
    $department_options[$department->id()] = $department->label();
  }

  $form['departmental_entity_restrictions'] = [
    '#type' => 'details',
    '#title' => t('Departmental Entity Restrictions'),
    '#group' => 'additional_settings',
  ];

  $form['departmental_entity_restrictions']['departments'] = [
    '#type' => 'checkboxes',
    '#options' => $department_options,
    '#default_value' => $node_type->getThirdPartySetting('dept_node', 'department_restrictions', array_keys($department_options)),
    '#title' => t('Departments that can use this entity'),
  ];

  $form['#entity_builders'][] = 'dept_node_form_node_type_form_builder';
}

/**
 * Entity builder for the dept_node_form_node_type_form_alter().
 */
function dept_node_form_node_type_form_builder($entity_type, $type, &$form, $form_state) {
  $type->setThirdPartySetting('dept_node', 'department_restrictions', $form_state->getValue('departments'));
}

/**
 * Implements hook_clientside_validation_should_validate().
 */
function dept_node_clientside_validation_should_validate($element, FormStateInterface &$form_state, $form_id) {
  // This works but looks odd, ideally this hook should have been called _should_not_validate() as this makes
  // about as much sense as a sunroof on a submarine.
  if (str_ends_with($form_id, 'scheduled_transitions_add_form_form')) {
    return TRUE;
  }
}
