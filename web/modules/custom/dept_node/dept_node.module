<?php

/**
 * @file
 * Departmental Node module for Departmental sites.
 */

use Drupal\dept_core\Department;
use Drupal\dept_node\Entity\Node;
use Drupal\dept_node\Form\NodeForm;
use Drupal\group\Entity\GroupContent;
use Drupal\node\NodeInterface;
use Drupal\views\Plugin\views\query\QueryPluginBase;
use Drupal\views\ViewExecutable;

/**
 * Implements hook_entity_type_alter().
 */
function dept_node_entity_type_alter(&$entity_types) {
  if (isset($entity_types['node'])) {
    $entity_types['node']->setClass(Node::class);

    foreach (['default', 'edit'] as $operation) {
      $entity_types['node']->setFormClass($operation, NodeForm::class);
    }
  }
}

/**
 * Implements hook_form_ENTITY_form_alter().
 */
function dept_node_form_node_form_alter(&$form, $form_state) {
  // Process Domain module pathauto alias options.
  if (array_key_exists('domain_path', $form['path']['widget'][0])) {
    $dept_manager = \Drupal::service('department.manager');
    $dept = $dept_manager->getCurrentDepartment();

    if (array_key_exists('group_publish', $form)) {
      $form['group_publish']['#attached']['library'][] = 'dept_node/dept_node.domain_pathauto';
    }
    elseif ($dept !== NULL && array_key_exists($dept->id(), $form['path']['widget'][0]['domain_path'])) {
      // Check the 'generate Domain URL' checkbox for the current domain.
      $form['path']['widget'][0]['domain_path'][$dept->id()]['pathauto']['#default_value'] = 1;
    }
  }

  $docs_field_ids = [
    'field_attachment',
    'field_publication_files',
    'field_publication_secure_files',
  ];

  if (!empty(array_intersect(array_keys($form), $docs_field_ids))) {
    $form['#attached']['library'][] = 'nicsdru_origins_theme/media_library_styles';
  }
}

/**
 * Implements hook_views_pre_render().
 */
function dept_node_views_pre_render(ViewExecutable $view) {
  // Append the active site name to a few fields/titles for publications RSS.
  if ($view->id() === 'press_releases') {
    $site_name = \Drupal::config('system.site')->get('name');
    $title = t('Latest press releases from ') . $site_name;
    $view->setTitle($title);

    if (\Drupal::routeMatch()->getRouteName() === 'entity.view.preview_form') {
      \Drupal::messenger()
        ->addWarning('NB: Title altered in dept_node_views_pre_render()');
    }
  }
}

/**
 * Implements hook_views_query_alter().
 *
 * This adds the active department group id value to the WHERE clause
 * where the group_content_field_data table has been both added as a
 * relationship in the view config and has been added as a boilerplate
 * filter condition to restrict o specific group.
 *
 * For topic entity queues, it alters the relationship condition to
 * restrict the query to the correct entity queue id, based on repurposing
 * the department name attribute as the numerical id would require a
 * separate fixed lookup condition or function.
 */
function dept_node_views_query_alter(ViewExecutable $view, QueryPluginBase $query) {
  $dept_manager = \Drupal::service('department.manager');
  /** @var \Drupal\dept_core\Department $dept */
  $dept = $dept_manager->getCurrentDepartment();

  if ($dept instanceof Department === FALSE) {
    return;
  }

  $base_table = $view->getBaseTables();

  if (array_keys($base_table)[0] === 'node_field_data') {
    /** @var \Drupal\views\Plugin\views\query\Sql $query */
    // Ignore query reference below - depending on the base table
    // and handling class, it's not guaranteed to be able to extract
    // the where conditions with the same method, or even at all.
    // @phpstan-ignore-next-line.
    foreach ($query->where as $i => &$clause) {
      foreach ($clause['conditions'] as $j => &$condition) {
        if ($condition['field'] != 'group_content_field_data_node_field_data.gid') {
          continue;
        }

        $condition['value'] = $dept->groupId();
      }
    }
  }

  if ($view->id() === 'topic_queue') {
    $dept_url_hostname_parts = explode('.', parse_url($dept->url(), PHP_URL_HOST));
    if ($dept_url_hostname_parts[0] === 'www') {
      $dept_url_hostname_parts = array_shift($dept_url_hostname_parts);
    }

    $topic_queue_id = 'topics_dept_' . str_replace('-ni', '', $dept_url_hostname_parts[0]);

    // Topic queue views is based on db query, so type hint the SQL query class.
    /** @var \Drupal\views\Plugin\views\query\Sql $query */
    $table = $query->getTableInfo('entity_subqueue__items');
    $table['join']->extra[0]['value'][0] = $topic_queue_id;
  }
}

/**
 * Implements hook_theme().
 */
function dept_node_theme($existing, $type, $theme, $path) {
  return [
    'topics_subtopics_list' => [
      'variables' => [
        'title' => NULL,
        'items' => NULL,
        'render_links' => NULL,
        'include_subtopics' => NULL,
      ],
    ],
  ];
}

/**
 * Implements hook_preprocess_node().
 */
function dept_node_preprocess_node(array &$variables) {
  /** @var \Drupal\node\NodeInterface $node */
  $node = &$variables['node'];
  $view_mode = $variables['view_mode'];
  $routename = \Drupal::routeMatch()->getRouteName();

  if (!$node instanceof NodeInterface) {
    return;
  }

  if ($view_mode === 'search_metadata' && $node->bundle() === 'news') {
    // Add the department metadata on the press-releases listing.
    if ($routename != 'view.news_search.press_release_search') {
      return;
    }

    // Rewrite any existing relative URLs to content to their absolute
    // departmental URL paths, using active config split profile values.
    if (!preg_match('|^http|', $variables['url'])) {
      $variables['url'] = \Drupal::service('rel2abs_url')
        ->handleUrl($variables['url'], $node);
    }

    // Inject the department for a press-release/news items for search.
    $group_contents = GroupContent::loadByEntity($variables['node']);
    foreach ($group_contents as $group_content_id => $group_content_entity) {
      $group = $group_content_entity->getGroup();

      // Exclude NIGov items from list; seems to be added exclusively for
      // access control purposes.
      if ($group->id() > 1) {
        // Department long-description stored as field value (with text format).
        // We only want the plain text value sitting in there to print out
        // as the group/department label per row in the metadata area.
        // If there is no field value, use the group entity label as a fallback.
        $dept_description = $group->get('field_description')->getValue();
        if (!empty($dept_description)) {
          foreach ($dept_description as $item) {
            $variables['content']['departments'][] = strip_tags($item['value']) ?? $group->label();
          }
        }
      }
    }
  }

  if ($view_mode === 'search_result') {
    $bundle = $node->bundle();

    if ($bundle === 'consultation') {
      $consultation_dates = $node->get('field_consultation_dates')->getValue();
      // Set the consultation status to open/closed based on its date values.
      $now = \Drupal::service('datetime.time')->getCurrentTime();
      $consultation_end = strtotime($consultation_dates[0]['end_value']);
      $consultation_ended = ($consultation_end - $now) <= 0;

      // Preprocess variable to examine consultation end date relative to
      // the current request timestamp and determine whether it is open
      // or whether it has already closed.
      $variables['content']['consultation_status'] = [
        '#type' => 'html_tag',
        '#tag' => 'span',
        '#attributes' => [
          'class' => [
            'metaListItem',
            'card__meta-type',
          ],
        ],
        '#value' => $consultation_ended ? t('Closed') : t('Open'),
        '#weight' => count($variables['content']) + 1,
      ];
    }
  }
}
