#ddev-generated
# Platform.sh provider configuration. This works out of the box, but can be edited to add
# your own preferences. If you edit it, remove the `ddev-generated` line from the top so
# that it won't be overwritten.

# Consider using `ddev get ddev/ddev-platformsh` (https://github.com/ddev/ddev-platformsh) for more
# complete platform integration.

# To use this configuration,

# 1. Check out the site from platform.sh and then configure it with `ddev config`. You'll want to use `ddev start` and make sure the basic functionality is working.
# 2. Obtain and configure an API token.
#    a. Login to the Platform.sh Dashboard and go to Account->API Tokens to create an API token for ddev to use.
#    b. Add the API token to the `web_environment` section in your global ddev configuration at ~/.ddev/global_config.yaml:
#    ```yaml
#    web_environment:
#    - PLATFORMSH_CLI_TOKEN=abcdeyourtoken
#    ```
# 3. Add PLATFORM_PROJECT and PLATFORM_ENVIRONMENT and optional PLATFORM_APP (only if your environment contains more than one app) variables to your project `.ddev/config.yaml` or a `.ddev/config.platform.yaml`
#    ```yaml
#    web_environment:
#    - PLATFORM_PROJECT=nf4amudfn23biyourproject
#    - PLATFORM_ENVIRONMENT=main
#    - PLATFORM_APP=app
# 4. `ddev restart`
# 5. Run `ddev pull platform`. After you agree to the prompt, the current upstream database and files will be downloaded.
# 6. Optionally use `ddev push platform` to push local files and database to platform.sh. Note that `ddev push` is a command that can potentially damage your production site, so this is not recommended.

# If you have more than one database on your Platform.sh project,
# you will likely to choose which one you want to use
# as the primary database ('db').
# Do this by setting PLATFORM_PRIMARY_RELATIONSHIP, for example, `ddev config --web-environment-add=PLATFORM_PRIMARY_RELATIONSHIP=main`
# or run `ddev pull platform` with the environment variable, for example
# `ddev pull platform -y --environment=PLATFORM_PRIMARY_RELATIONSHIP=main`
# If you need to change this `platform.yaml` recipe, you can change it to suit your needs, but remember to remove the "ddev-generated" line from the top.

# Debugging: Use `ddev exec platform` to see what platform.sh knows about
# your configuration and whether it's working correctly.

auth_command:
  command: |
    set -eu -o pipefail
    if [ -z "${PLATFORMSH_CLI_TOKEN:-}" ]; then echo "Please make sure you have set PLATFORMSH_CLI_TOKEN." && exit 1; fi
    if [ -z "${PLATFORM_PROJECT:-}" ]; then echo "Please make sure you have set PLATFORM_PROJECT." && exit 1; fi
    if [ -z "${PLATFORM_ENVIRONMENT:-}" ]; then echo "Please make sure you have set PLATFORM_ENVIRONMENT." && exit 1; fi

db_pull_command:
  command: |
    # set -x   # You can enable bash debugging output by uncommenting
    set -eu -o pipefail
    export PLATFORMSH_CLI_NO_INTERACTION=1
    ls /var/www/html/.ddev >/dev/null # This just refreshes stale NFS if possible

    platform db:dump --yes ${PLATFORM_APP:+"--app=${PLATFORM_APP}"} --relationship=drupal7db --gzip --file=/var/www/html/.ddev/.downloads/drupal7.sql.gz --project="${PLATFORM_PROJECT:-setme}" --environment="${PLATFORM_ENVIRONMENT:-setme}"
    platform db:dump --yes ${PLATFORM_APP:+"--app=${PLATFORM_APP}"} --relationship=database --gzip --file=/var/www/html/.ddev/.downloads/db.sql.gz --project="${PLATFORM_PROJECT:-setme}" --environment="${PLATFORM_ENVIRONMENT:-setme}"
    echo "Downloaded db dumps for databases"

db_import_command:
  command: |
    set -eu -o pipefail
    # set -x   # You can enable bash debugging output by uncommenting
    gzip -dc .ddev/.downloads/drupal7.sql.gz | ddev mysql drupal7
    gzip -dc .ddev/.downloads/db.sql.gz | ddev mysql db
    ddev drush cim -y
  service: host

files_pull_command:
  command: |
    echo "Files will not be pulled due to filesize."

files_import_command:
  command: |
    echo "Files will not be imported due to filesize."
